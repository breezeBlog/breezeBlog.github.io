<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java数据结构与算法</title>
      <link href="/breezeblog.gitee.io/posts/bd89.html"/>
      <url>/breezeblog.gitee.io/posts/bd89.html</url>
      
        <content type="html"><![CDATA[<p><img src="/breezeblog.gitee.io/breezeblog.gitee/1559989480817.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iDea常用快捷键</title>
      <link href="/breezeblog.gitee.io/posts/2d67.html"/>
      <url>/breezeblog.gitee.io/posts/2d67.html</url>
      
        <content type="html"><![CDATA[<p>整理了一些IDEA开发常用的快捷键：</p><p>快捷键组合实现效果</p><p>psvm + Tab键 &#x2F; main + Tab键public static void main(String[] args)</p><p>sout + Tab键System.out.println()</p><p>Ctrl + X删除当前行</p><p>Ctrl +D复制当前行</p><p>Alt+Insert(或右键Generate)生成代码(如get,set方法,构造函数等)</p><p>Ctrl+Alt+T生成try catch （或者 Alt+enter选择）</p><p>CTRL+ALT+T把选中的代码放在 TRY{} IF{} ELSE{} 里</p><p>Ctr+shift+U实现大小写之间的转化</p><p>ALT+回车导入包,自动修正</p><p>CTRL+ALT+L格式化代码</p><p>CTRL+ALT+I自动缩进</p><p>CTRL+E最近更改的代码</p><p>fori生成for (int i &#x3D; 0; i &lt; ; i++) {}</p><p>Alt + &lt;–左右–&gt;键实现窗口左右更换（多窗口）</p><p>Ctrl + 鼠标点击快速找到成员变量的出处</p><p>Shift+F6重构&#x2F;重命名 (包、类、方法、变量、甚至注释等)</p><p>CTRL+Q查看当前方法的声明</p><p>Ctrl+Alt+V自动创建变量（new 对象();之后选择按快捷键）</p><p>Ctrl+O重写方法</p><p>Ctrl+I实现方法</p><p>ALT+&#x2F;代码提示</p><p>Ctrl+Shift+R在当前项目中替换指定内容</p><p>Ctrl+E最近编辑的文件列表</p><p>Ctrl+P显示方法参数信息</p><p>Ctrl+Shift+Insert查看历史复制记录，idea可以保留历史复制的 100 条记录</p><p>控制台语句 System.out 相关：</p><p>生成控制台的相关快捷键描述</p><p>sout + Tab键生成System.out.println();，输出到控制台语句并换行。</p><p>souf + Tab键生成System.out.printf(“”);,输出一个格式化字符串到控制台。</p><p>soutm + Tab键生成System.out.println(“类名.方法名”);，输出当前 类和方法名 到控制台。</p><p>soutp + Tab键生成System.out.println(所有方法参数名+值);，输出当前 方法的参数名和值 到控制台。</p><p>————————————–日常使用 必备快捷键—————————————</p><p>查找</p><p>快捷键介绍</p><p>Ctrl + F在当前文件进行文本查找</p><p>Ctrl + R在当前文件进行文本替换</p><p>Shift + Ctrl + F在项目进行文本查找</p><p>Shift + Ctrl + R在项目进行文本替换</p><p>Shift + Shift快速搜索</p><p>Ctrl + N查找class</p><p>Ctrl + Shift + N查找文件</p><p>Ctrl + Shift + Alt + N查找symbol（查找某个方法名）</p><p>跳转切换</p><p>快捷键介绍</p><p>Ctrl + E最近文件</p><p>Ctrl + Tab切换文件</p><p>Ctrl + Alt + ←&#x2F;→跳转历史光标所在处</p><p>Alt + ←&#x2F;→ 方向键切换子tab</p><p>Ctrl + Ggo to（跳转指定行号）</p><p>编码相关</p><p>快捷键介绍</p><p>Ctrl + W快速选中</p><p>(Shift + Ctrl) + Alt + J快速选中同文本</p><p>Ctrl + C&#x2F;Ctrl + X&#x2F;Ctrl + D快速复制或剪切</p><p>多行选中 Tab &#x2F; Shift + Tabtab</p><p>Ctrl + Y删除整行</p><p>滚轮点击变量&#x2F;方法&#x2F;类快速进入变量&#x2F;方法&#x2F;类的定义处</p><p>Shift + 点击Tab快速关闭tab</p><p>Ctrl + Z 、Ctrl + Shift + Z后悔药，撤销&#x2F;取消撤销</p><p>Ctrl + Shift + enter自动收尾，代码自动补全</p><p>Alt + enterIntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</p><p>Alt + ↑&#x2F;↓方法快速跳转</p><p>F2跳转到下一个高亮错误 或 警告位置</p><p>Alt + Insert代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</p><p>Ctrl + Shift + L格式化代码</p><p>Shift + F6快速修改方法名、变量名、文件名、类名等</p><p>Ctrl + F6快速修改方法签名</p><p>代码阅读相关</p><p>快捷键介绍</p><p>Ctrl + P方法参数提示显示</p><p>Ctrl + Shift + i就可以在当前类里再弹出一个窗口出来</p><p>Alt + F7可以列出变量在哪些地方被使用了</p><p>光标在子类接口名，Ctrl + u跳到父类接口</p><p>Alt + F1 + 1， esc</p><p>(Shift) + Ctrl + +&#x2F;-代码块折叠</p><p>Ctrl + Shift + ←&#x2F;→移动窗口分割线</p><p>Ctrl + (Alt) + B跳转方法定义&#x2F;实现</p><p>Ctrl + H类的层级关系</p><p>Ctrl + F12Show Members 类成员快速显示<br>版本管理相关</p><p>快捷键介绍<br>Ctrl + DShow Diff</p><p>(Shift) + F7（上）下一处修改</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/breezeblog.gitee.io/posts/70b0.html"/>
      <url>/breezeblog.gitee.io/posts/70b0.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>顾名思义，面向对象，你得首先有个对象，有了对象后，就可以和对象进行互动，所以面向对象编程是<strong>通过对象的方式，把现实世界映射到计算机模型</strong>的一种编程方法；与面向对象编程相反的是面向过程编程，是把模型分解成一步一步的过程</p><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><p>现实世界中，我们定义了“人”这种抽象概念，而具体的人则是“小明”、“小红”、“小军”等一个个具体的人。所以，“人”可以定义为一个<strong>类（class）</strong>，而具体的人则是<strong>实例（instance）</strong></p><p>先仔细看看这简单的段代码吧~ 相信在此框架下，后面学起来更轻松~</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 定义了一个人类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员变量</span>    String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//名字</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 年龄</span>        <span class="token comment" spellcheck="true">//无参构造方法</span>    <span class="token keyword">public</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//含参数构造方法</span>    <span class="token keyword">public</span> <span class="token function">person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁就已经学会干饭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//无参实例化</span>       person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小红"</span><span class="token punctuation">;</span>       p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//调用eat方法</span>       p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 含参实例化</span>       person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//调用eat方法</span>       p2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="1、-类"><a href="#1、-类" class="headerlink" title="1、 类"></a>1、 类</h3><p>class是一种对象模版，<strong>它定义了如何创建实例</strong>，因此，class本身就是一种数据类型</p><h4 id="定义class"><a href="#定义class" class="headerlink" title="定义class"></a>定义class</h4><p>在Java中，创建一个类，例如，给这个类命名为<code>Person</code>，就是定义一个<code>class</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>一个<code>class</code>可以包含多个字段（<code>field</code>），<strong>字段用来描述一个类的特征</strong>，通过class把一组数据汇集到一个对象上，实现了<strong>数据封装</strong></p><h3 id="2、-实例"><a href="#2、-实例" class="headerlink" title="2、 实例"></a>2、 实例</h3><p>instance是根据class创建的实例，<strong>可以创建多个instance，每个instance类型相同，但各自属性可能不相同</strong></p><h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h4><p>new操作符可以创建一个实例，然后，我们需要定义一个引用类型的变量来指向这个实例，所以是<strong>引用变量<code>ming</code>指向实例<code>new Person()</code></strong>,可以通过这个变量来操作实例</p><pre class=" language-java"><code class="language-java">Person ming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不同的实例在内存中对应位置不一样哦~</p><h3 id="3、this关键字"><a href="#3、this关键字" class="headerlink" title="3、this关键字"></a>3、this关键字</h3><p>在调用方法的时候，java会自动的把<strong>对象</strong>传递给<strong>方法</strong>， 在方法中由<code>this</code>来接收对象，就和开始所示代码一样；<strong>变量的查找顺序:</strong> 先找自己方法内。如果自己没有，就去<code>this</code>里面找</p><ul><li>this:当前类的对象</li><li>this可以在方法内部获取到对象中的属性信息</li><li>this还可以区分局部变量和成员变量</li></ul><h3 id="4、方法"><a href="#4、方法" class="headerlink" title="4、方法"></a>4、方法</h3><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol><li>public 公共的.所有人都可访问</li><li>default 包访问权限.在自己包内可以随意访问.</li><li>private 私有的.</li></ol><h4 id="get-set方法引入"><a href="#get-set方法引入" class="headerlink" title="get set方法引入"></a><code>get</code> <code>set</code>方法引入</h4><p>开始已经说了字段<code>field</code>可以用来用来描述一个类的特征，但是直接把<code>field</code>用<code>public</code>暴露给外部可能会破坏封装性。比如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义person类</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化</span>Person ming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ming<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Xiao Ming"</span><span class="token punctuation">;</span>ming<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// age可以设置为负数 </span></code></pre><p>怎么办？使用<strong>private（私有）</strong> 字段</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>private</code>修饰<code>field</code>，就避免外部代码直接去访问<code>field</code>，那我们要怎么使用这些<code>dield</code>呢？</p><p>我们需要<strong>方法（method）</strong> 来从外部代码间接修改<code>field</code>的值，比如我们使用使用外部方法<code>getName</code>来间接获取<code>private</code>字段的值，再使用<code>setName</code>来检查传入的参数对不对，从而达到筛选的效果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实例化调用</span>        Person ming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ming<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Xiao Ming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置name</span>        ming<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置age</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ming<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> ming<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义类</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在这里我们就筛选出了不能传入name为空的字符串，</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//抛出非法或者不合适的这个异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回方法值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>同理age也可以如此操作，需要注意的是，这个方法相当于被封装在person类里，通过一个类定义方法，就可以给外部暴露一些操作的接口的同时保证自己内部类的统一，我们可以在外部使用<strong>实例变量.方法名(参数);</strong> 来进行调用</p><p>看起来可能会有点麻烦，因为一个成员变量就要两个方法，所以在我们的idea中可以<strong>快捷生成<code>get</code> <code>set</code></strong> 方法 : 空白位置-&gt;右键-&gt; generate -&gt; getter and setter-&gt;全选-&gt; Ok.</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>指的是在创建对象的时候，类自动调用的方法.<br>语法:<br>public类名(传参){<br>}<br>注意:</p><ol><li>没有返回值这一项</li><li>在我们new的时候.自动调用构造方法<br><strong>作用:</strong> 在创建对象的时候.给对象设置属性信息.</li></ol><p>java会默认自动的送给每一个类一个无参构造方法</p><h4 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h4><p>构造方法也是方法，也可以进行重载。</p><p><strong>作用:</strong> 可以又更多的方式去创建对象；可以使用this可以访问其他的构造方法 <code>this()</code></p><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>定义方法的语法是：</p><pre class=" language-Java"><code class="language-Java">修饰符 方法返回类型 方法名(方法参数列表) &#123;    若干方法语句;    return 方法返回值;&#125;</code></pre><p>方法返回值通过<code>return</code>语句实现，如果没有返回值，返回类型设置为<code>void</code>，可以省略<code>return</code></p><p>同样的我们既然有<code>private</code>字段那么也就有<code>private</code>方法，并且<code>private</code>方法不允许外部调用，但是我们可以在privet内部调用<code>private</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> birth<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirth</span><span class="token punctuation">(</span><span class="token keyword">int</span> birth<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birth <span class="token operator">=</span> birth<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">calcAge</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用private方法</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// private方法:</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calcAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> currentYear<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> currentYear <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5、静态"><a href="#5、静态" class="headerlink" title="5、静态"></a>5、静态</h3><p>在一个<code>class</code>中定义的字段，我们称之为实例字段，用<code>static</code>修饰的字段，称为静态字段：<code>static field</code>，实例字段在每个实例中都有自己的一个独立“空间”，但是静态字段只有一个共享“空间”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义静态字段number:</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以有两者办法使用静态</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//直接通过实例变量访问静态对象</span><span class="token comment" spellcheck="true">//所有实例的静态字段都被修改了，原因是静态字段并不属于实例</span> hong<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ming<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//通过类名访问静态变量</span>Person<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是不推荐用 <strong><code>实例变量.静态字段</code></strong> 去访问静态字段， 因为在Java程序中，实例对象并没有静态字段 ；实例对象能访问静态字段只是因为编译器可以根据实例类型自动转换为 <strong><code>类名.静态字段</code></strong> 来访问静态对象。所以推荐用类名来访问静态字段。</p><p>因为静态对象会比实例对象更先加载，就和司马迁不能给你编写历史，但是你可以给司马迁编写历史一样：不能够用this去访问实例对象，不能在静态方法里调用非静态方法，可以在静态方法里调用静态方法，也可以用类名来调用静态方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        number <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>特点:</strong> .</p><ol><li>数据共享 (要变一起变)</li><li>属于类的，并不属于对象</li><li>优先于对象产生的</li></ol><h3 id="6、包和导包"><a href="#6、包和导包" class="headerlink" title="6、包和导包"></a>6、包和导包</h3><p><strong>包</strong>:其实本质上就是文件夹，在代码中需要写package+包名;  例如：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffe7923532e544338dd4b9beb12db165~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>导包</strong>:import包+类; 不同包之间需要进行导包才能互相访问</p><p><strong>不需要导包:</strong></p><ol><li>在自己包里</li><li>java.lang包 下的所有内容都不需要导包 比如：</li></ol><pre class=" language-java"><code class="language-java">       String       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println0</code></pre><h3 id="7、继承"><a href="#7、继承" class="headerlink" title="7、继承"></a>7、继承</h3><p>继承:子类可以自动拥有父类中除了私有内容外的其他所有内容.</p><p>当出现x是一种y的时候. x就可以继承y，换句话说就是动物都会叫，猴子是动物，猴子继承了动物会叫的功能，所以猴子会叫</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span>类<span class="token keyword">extends</span>父类<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>作用:</strong></p><ul><li>简化代码的开发.</li><li>子类对父类进行了扩展.</li></ul><p>如果父类和子类存在相同属性，子类是如何继承的呢？</p><p>使用<code>super</code>关键字调用父类，使用<code>this</code>关键字调用自己类，在<strong>调用变量</strong>时<code>this</code>关键字是先找自己类，再找父类；</p><p>父类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  String name <span class="token operator">=</span> <span class="token string">"英雄"</span>  <span class="token keyword">public</span> <span class="token function">fulei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> print <span class="token function">ln</span><span class="token punctuation">(</span><span class="token string">"我是父类的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>子类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SunWuKong</span> <span class="token keyword">extends</span> <span class="token class-name">Hero</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> <span class="token string">"孙大圣"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">SunWuKong</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 还原程序，在子 类构造方法的第一行，默认调用父类的构造方法</span>    System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> print <span class="token function">ln</span><span class="token punctuation">(</span><span class="token string">"我是子类的构造方法"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chi</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//想看到父类中的name</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span> print <span class="token function">Ln</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先找自己类，然后找父类</span>    System<span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在吃桃子"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     SunWuKong S <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SunWuKong</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>    S<span class="token punctuation">.</span><span class="token function">chi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>调用方法</strong>时一般默认在子类的第一个构造方法里最先使用<code>super()</code>调用父类的<em><strong>无参构造方法</strong></em>，所以可以不写<code>super()</code>调用父类的无参构造方法，但是对于<em><strong>含参构造方</strong></em>法，就需要在子类中使用<code>super(参数)</code>调用父类的含参构造方法，不然就会报错</p><p>那如果子类不满意继承来的方法怎么办呢？</p><h3 id="8、重写"><a href="#8、重写" class="headerlink" title="8、重写"></a>8、重写</h3><p><strong>方法的重写</strong>，也即是子类对父类中提供的方法进行重新定义 <strong>语法:</strong> 子类和父类中的方法的声明完全一致，重写又被称为<strong>方法的覆盖</strong>； 如果子类想在重写的方法中使用父类原本的方法仍然可以使用<code>super.方法名()</code>的形式去调用，这种既重写了方法又调用了原方法叫做<strong>半盖</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d5c7e8db6da421983202ecc1dca5d0e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>上面就是toString方法的重写</p><h3 id="9、多态"><a href="#9、多态" class="headerlink" title="9、多态"></a>9、多态</h3><p>多态:同一个对象拥有多种形态</p><p><strong>举个例子：</strong> 假如有三个动物，猫、狗、鸡，猫吃鱼、狗啃骨头、鸡啄米，现在有一个人，这个人要在早晨去喂这三个动物，应该怎么写呢？</p><p>因为多态比较难一点所以就写详细一点</p><p>动物：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物会进食"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>猫：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>狗：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span>  <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗啃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>鸡：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chicken</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸡啄米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"练习时常两年半的舞蹈鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>人：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feedanimal</span><span class="token punctuation">(</span>Animal ain<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"人在喂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ain<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>场景：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Scenario</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例化  向上转型</span>        Animal ain1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal ain2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal ain3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在一个早晨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">feedanimal</span><span class="token punctuation">(</span>ain1<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">feedanimal</span><span class="token punctuation">(</span>ain2<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">feedanimal</span><span class="token punctuation">(</span>ain3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*        在早晨        人在喂猫吃鱼        人在喂鸡啄米        人在喂狗啃骨头        */</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以看出人在喂的时候只喂了动物，而不是把猫狗鸡都一个一个挨着喂，是因为猫狗鸡和动物有一个继承关系，并且我们在实例化的时候把<strong>子类对象赋值给了父类变量</strong>，相对于把子类们都统一到了父类里，其实这就是多态的体现，我们把这叫做<strong>向上转型</strong> ，但是不难看出，鸡还有跳舞的功能被屏蔽了， 因为向上转型会<strong>屏蔽掉子类不同于父类的方法</strong></p><p>有向上转型就有向下转型，我们把<strong>父类的变量转化回子类的变量</strong>就叫做<strong>向下转型</strong>，向下转型有可能有风险. java要求必须要写强制类型转换(转换之后的数据类型)变量</p><pre class=" language-JAVA"><code class="language-JAVA">public class Scenario &#123;    public static void main(String[] args) &#123;        Animal ain2 = new Chicken();                Chicken c = (Chicken) ain2;        c.dance();        c.eat();      /*      练习时常两年半的舞蹈鸡      鸡啄米        */            &#125;&#125;</code></pre><h3 id="10、final"><a href="#10、final" class="headerlink" title="10、final"></a>10、final</h3><ul><li>被<code>fina</code>l修饰的变量不可以被改变，又被称为常量</li><li>被<code>final</code>修饰的方法不可以被重写.</li><li>被<code>final</code>修饰的类不可以被继承.</li></ul><h3 id="11、抽象"><a href="#11、抽象" class="headerlink" title="11、抽象"></a>11、抽象</h3><p>只声明，不实现，可以有正常的方法</p><ul><li><strong>抽象方法</strong>:使用 <strong><code>abstract</code></strong> 来<strong>修饰</strong>，不可以有方法体，直接用分号结束即可；</li><li><strong>抽象类</strong>:如果一个类中有抽象方法，这个类必须是一一个抽象类；</li></ul><p><strong>特点:</strong></p><ol><li>抽象类不可以创建对象；</li><li>抽象类的子类，必须重写父类中的抽象方法.否则,子类必须也是抽象类；</li><li>通过抽象类可以强制的要求子类中必须有哪些方法.；</li></ol><h3 id="12、接口"><a href="#12、接口" class="headerlink" title="12、接口"></a>12、接口</h3><p>特殊的抽象类：所有的方法都是抽象方法,用 <strong><code>interface</code></strong> 来<strong>声明</strong></p><ul><li>接口中所有的方法都是抽象方法。可以省略掉<code>abstract</code>；</li><li>接口中所有的内容都是公开的。公共的；</li><li>接口中所有的变量都是全局静态常量 <code>public static final </code>；</li><li>能继承接口的只能是接口；</li><li>接口和类只能是实现关系<code>implepents</code>；</li><li>接口也<strong>具有多态性</strong>，也就是 接口可以把很多不相关的内容进行整合；</li><li>类只能单继承，接口支持<strong>多实现</strong>，也就是类可以继承一个类，实现多个接口；</li></ul><h3 id="13、成员变量初始值"><a href="#13、成员变量初始值" class="headerlink" title="13、成员变量初始值"></a>13、成员变量初始值</h3><ol><li>java中所有的变量必须先声明，后赋值才能使用I</li><li>java中的成员变量，在创建对象的时候，都会执行一次初始化操作.都会给一个默认值.</li><li>基本数据类型默认值都是0包括boolean -&gt; false</li><li>引用数据类型: null，null表示空,什么都没有.占位.</li></ol><h3 id="14、toString"><a href="#14、toString" class="headerlink" title="14、toString"></a>14、toString</h3><p>默认的toString() -&gt;包+ 类@内存地址</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xyq<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//类默认继承Object</span>    String name<span class="token punctuation">;</span>    String color <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String color<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Cat C <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span> name<span class="token operator">:</span><span class="token string">"小花"</span>， color<span class="token operator">:</span> <span class="token string">"绿色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//直接打印这个</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 com.xyq.entity.Cat@47d384ee</span>    <span class="token comment" spellcheck="true">//默认打印对象，自动的执行这个对象中的toString( )方法</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//也输出 com.xyq.entity.Cat@47d384ee</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>很明显我们对父类Stirng里的toString方法并不满意，那么我们可以重写这个方法(上面有)</p><h3 id="15、instanceof"><a href="#15、instanceof" class="headerlink" title="15、instanceof"></a>15、instanceof</h3><p>判断xxx对象是否是xxx类型的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Anima</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Animal ani <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ani <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span> ou<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是一只猫。撸一撸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span> out<span class="token punctuation">.</span>pr <span class="token function">intln</span><span class="token punctuation">(</span><span class="token string">"不是一只猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="16、内存分析"><a href="#16、内存分析" class="headerlink" title="16、内存分析"></a>16、内存分析</h3><ol><li><strong>堆</strong>：主要存放对象.</li><li><strong>栈</strong>：局部变量，以及基本数据类型的变量.</li><li><strong>代码区</strong>：类和方法</li><li><strong>数据区</strong>：常量池和静态变量</li></ol><p><a href="https://www.bilibili.com/video/BV12t411u726?spm_id_from=333.337.search-card.all.click&vd_source=56da61c042e408be6a5e17b6d730d6a8">jvm内存模型全面解析</a></p><p><a href="https://www.bilibili.com/video/BV1pJ411y7UK?p=28&vd_source=56da61c042e408be6a5e17b6d730d6a8">参数传递内存分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇6.5k字的CSS总结</title>
      <link href="/breezeblog.gitee.io/posts/f754.html"/>
      <url>/breezeblog.gitee.io/posts/f754.html</url>
      
        <content type="html"><![CDATA[<h1 id="浅品-CSS"><a href="#浅品-CSS" class="headerlink" title="浅品 CSS"></a>浅品 CSS</h1><h2 id="一、常用语法与基本概念"><a href="#一、常用语法与基本概念" class="headerlink" title="一、常用语法与基本概念"></a>一、常用语法与基本概念</h2><h3 id="1、CSS-是什么"><a href="#1、CSS-是什么" class="headerlink" title="1、CSS 是什么"></a>1、CSS 是什么</h3><p><strong>*C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets（层叠样式表）*<br>CSS 是一门基于规则的语言 —— 你能定义用于你的网页中特定元素样式的一组规则。<br>让你的网页更加美观。</p><ul><li>用来定义页面元素的样式</li><li>设置字体和颜色</li><li>设置位置和大小</li><li>添加动画效果</li></ul><pre class=" language-css"><code class="language-css">h<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">5</span>em<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>就像上面的代码一样，CSS 语法由<strong>选择器 (selector)</strong>+<strong>{}</strong> ，在大括号内部定义一个或多个形式为  <strong>属性 (property):值 (value);</strong>   的  <strong>声明 (declarations)</strong> 。</p><h3 id="2、css-的引入"><a href="#2、css-的引入" class="headerlink" title="2、css 的引入"></a>2、css 的引入</h3><ol><li>内联样式(行内样式)</li></ol><p>要使用内联样式，你需要在相关的标签内使用样式(style) 属性。Style 属性可以包含任何 CSS 属性，<strong>缺点</strong>是缺乏整体性和规划性，不利于维护，维护成本高</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--内联--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>内部样式</li></ol><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用<code>&lt;style&gt;</code> 标签在文档头部定义内部样式表， <strong>缺点</strong> 是单个页面内的 CSS 代码具有统一性和规划性,便于维护，但是在多个页面之间容易混乱</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--嵌入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>    li<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>    p<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>外部样式(推荐)</li></ol><p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用<link> 标签链接到样式表。<link> 标签在(文档的)头部</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--外链--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>其中<strong>外链</strong>（推荐)，<strong>嵌入</strong>（常常用与组件开发），<strong>内联</strong>（不推荐）就是 CSS 的生效地点不同而产生的不同使用方式</p><h3 id="3、选择器"><a href="#3、选择器" class="headerlink" title="3、选择器"></a>3、选择器</h3><h4 id="3-1、-选择器"><a href="#3-1、-选择器" class="headerlink" title="3.1、***** 选择器"></a>3.1、**<code>*</code>** 选择器</h4><p><strong>通配选择器</strong> 也叫全局选择器 ， 顾名思义，全局选择器可以与任何元素匹配，优先级最低，一般做样式初始化</p><pre class=" language-CSS"><code class="language-CSS">*&#123;    margin：0;    padding: 0;&#125;</code></pre><h4 id="3-2、-标签-选择器"><a href="#3-2、-标签-选择器" class="headerlink" title="3.2、 标签 选择器"></a>3.2、 <strong><code>标签</code></strong> 选择器</h4><p>也叫 元素选择器，HTML 文档中的元素，<code>p. b. div、 a. img、 body</code> 等。它选择的是页面上所有这种类型的标签,所以经常描述”共性”，无法描述某一个元素的“个性”</p><pre class=" language-CSS"><code class="language-CSS">h3&#123;  color: coral; &#125;</code></pre><h4 id="3-3、-id选择器"><a href="#3-3、-id选择器" class="headerlink" title="3.3、 id选择器"></a>3.3、 <strong>id</strong>选择器</h4><p>在 HTML 中给组件绑定 id，在 CSS 中以#开头+id 名来达到选择效果，值得注意的是 id 值必须是唯一的，并且 id 不能以数字开头</p><pre class=" language-css"><code class="language-css"> &lt;p id=<span class="token string">"exciting"</span>>这里是id选择器代码展示&lt;/p>  #exciting&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span>        <span class="token property">border</span><span class="token punctuation">:</span>   &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="3-4、合并-选择器"><a href="#3-4、合并-选择器" class="headerlink" title="3.4、合并 选择器"></a>3.4、<strong>合并</strong> 选择器</h4><p>可以使用 <code>,</code> 把不同的标签或者不同的类合并到同一个样式，可以减少代码重复；</p><pre class=" language-css"><code class="language-css">h<span class="token number">1</span>,p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="3-5、-class-选择器"><a href="#3-5、-class-选择器" class="headerlink" title="3.5、 class 选择器"></a>3.5、 <strong><code>class</code></strong> 选择器</h4><p>与 id 选择器类似但是是以 class 的属性名来决定，不同的是其中 class 的值可以出现多次，</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  hello  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b  c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token number">.</span>a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*先执行选择器b 再执行选择器c*/</span>      <span class="token number">.</span>b &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>      <span class="token number">.</span>c &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">fount-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>      &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><h4 id="5-6、属性-选择器"><a href="#5-6、属性-选择器" class="headerlink" title="5.6、属性 选择器"></a>5.6、<strong>属性</strong> 选择器</h4><ul><li><p><code>[attr]</code>表示带有以  <em>attr</em>  命名的属性的元素。</p></li><li><p><code>[attr=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值为<em>值</em>  的元素。</p></li><li><p><code>[attr~=value]</code>表示带有以  <em>attr</em>  命名的属性的元素，并且该属性是一个以空格作为分隔的值列表，其中至少有一个值为<em>值</em>。</p></li><li><p><code>[attr|=value]</code>表示带有以  <em>attr</em>  命名的属性的元素，属性值为“value”或是以“value-”为前缀（“”为连字符，Unicode 编码为 U+002D）开头。典型的应用场景是用来匹配语言简写代码（如 zh-CN，zh-TW 可以用 zh 作为 value）。<code>-</code></p></li><li><p><code>[attr^=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值是以 *value *开头的元素。</p></li><li><p><code>[attr$=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值是以 *value *结尾的元素。</p></li><li><p><code>[attr*=value]</code>表示带有以  <em>attr</em>  命名的属性，且属性值至少包含一个 *value *值的元素。</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 存在 title 属性的&lt;a> 元素 */</span>a[title] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 存在 href 属性并且属性值匹配"https://example.org"的&lt;a> 元素 */</span>a[href=<span class="token string">"https://example.org"</span>]&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 存在 href 属性并且属性值包含"example"的&lt;a> 元素 */</span>a[href*=<span class="token string">"example"</span>] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 存在 href 属性并且属性值结尾是".org"的&lt;a> 元素 */</span>a[href$=<span class="token string">".org"</span>] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 存在 class 属性并且属性值包含以空格分隔的"logo"的&lt;a>元素 */</span>a[class~=<span class="token string">"logo"</span>] &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="5-7、-伪类"><a href="#5-7、-伪类" class="headerlink" title="5.7、 伪类"></a>5.7、 <strong>伪类</strong></h4><p>CSS <strong><em>伪类</em></strong>  是添加到选择器的关键字，指定要选择的元素的特殊状态。例如，<code>：hover</code>  可被用于在用户将鼠标悬停在按钮上时改变按钮的颜色。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 所有用户指针悬停的按钮 */</span><span class="token property">button</span><span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h5 id="动态伪伪类"><a href="#动态伪伪类" class="headerlink" title="动态伪伪类"></a>动态伪伪类</h5><ul><li><code>:link</code>元素被定义了超链接但并未被访问过</li><li><code>:visited</code>元素被定义了超链接并已被访问过</li><li><code>:active</code>元素被激活</li><li><code>:hover</code>鼠标悬停</li><li><code>:focus</code>元素获取焦点</li></ul><h5 id="UI-元素状态伪类"><a href="#UI-元素状态伪类" class="headerlink" title="UI 元素状态伪类"></a>UI 元素状态伪类</h5><ul><li><code>:checked</code>选中的复选按钮或者单选按钮表单元素</li><li><code>:enabled</code>所有启用的表单元素</li><li><code>:disabled</code>所有禁用的表单元素</li></ul><h5 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h5><ul><li><code>:fisrt-child</code>父元素的第一个子元素</li><li><code>:last-child</code>父元素的最后一个子元素的元素</li></ul><h4 id="5-8、关系选择器"><a href="#5-8、关系选择器" class="headerlink" title="5.8、关系选择器"></a>5.8、<strong>关系</strong>选择器</h4><ol><li>后代选择器</li></ol><p>定义：选择<strong>所有</strong>被 E 元素包含的 F 元素，中间用空格隔开<br>语法：<code>E F&#123;&#125;r</code></p><ol start="2"><li>子代选择器</li></ol><p>定义：选择所有作为 E 元素的<strong>直接子元素</strong>F，对更深一层的元素不起作用，用<code>&gt;</code>表示<br>语法： <code> E&gt;F&#123;&#125;</code></p><ol start="3"><li><p>相邻兄弟选择器<br>定义: 选择紧跟 E 元素后的 F 元素，用加号表示，选择<strong>相邻的第一个兄弟元素</strong><br>语法： <code>E+F&#123;&#125;</code></p></li><li><p>通用兄弟选择器<br>定义 ：选择 E 元素之后的<strong>所有兄弟元素</strong>F，作用于多个元素，用<del>隔开<br>语法： &#96;E</del>F{}&#96;</p></li></ol><h3 id="4、CSS-如何工作"><a href="#4、CSS-如何工作" class="headerlink" title="4、CSS 如何工作"></a>4、CSS 如何工作</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/622d94b4a8654015926c75a8e7e32a62~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="5、CSS-常用属性"><a href="#5、CSS-常用属性" class="headerlink" title="5、CSS 常用属性"></a>5、CSS 常用属性</h3><h4 id="5-1、color（颜色属性）"><a href="#5-1、color（颜色属性）" class="headerlink" title="5.1、color（颜色属性）"></a>5.1、<strong>color</strong>（颜色属性）</h4><ul><li><p><code>rgb（0,0,0）</code> 和十六进制 <code>#000000</code> <em>（#00 红 00 绿 00 蓝）</em> GRB 以红绿蓝三原色直接组合；缺点：<strong>不直接关联所见颜色</strong> ；</p></li><li><p><code>hsl（0,0%,0%）</code> HSL 通过色相，饱和度和亮度组合； <strong>hue</strong>（色相），范围：0-360 ； <strong>saturation</strong>（饱和度），范围：0-100% ； <strong>lightness</strong>（亮度），范围：0-100%</p></li><li><p><code>#00000000</code> <strong>Aloha</strong> 为颜色透明度类似纯色滤镜，范围<strong>0-1</strong>从透明到不透明； 可添加在 grb 和 hsl 后变成<strong>rgba</strong> <strong>shla</strong> 而新版的浏览器可不写直接加第四位，可<strong>直接在后添加两位作为透明</strong></p></li><li><p><code>opacity</code> ： 透明度，从不透明到透明 0–&gt;1 (非 color 的属性值，为了分类先放着)</p></li></ul><h4 id="5-2、-fount（字体属性）"><a href="#5-2、-fount（字体属性）" class="headerlink" title="5.2、 fount（字体属性）"></a>5.2、 <strong>fount</strong>（字体属性）</h4><ul><li><p><code>font-family</code>字体主题（可以有多个属性值，浏览器逐级选设备上有的字体），其中存在<code>sans-serif</code>（通用字体）属性 ，还可以通过下面代码规则来自定义字体主题，但是可能会影响原有字体</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span>&amp;#123<span class="token punctuation">;</span></span>    font-family：<span class="token string">"字体名字"</span> src：url（字体所在地址）    format（<span class="token string">""</span>）&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><p><code>font-size</code>字体大小</p></li><li><p><code>font-style</code>字体样式 属性值为<code>italic</code>时为<em>斜体</em></p></li><li><p><code>font-weight</code>字重 ;范围：100-900 ；其中 400 可以用 normal 替代，700 可以用 bold 替代 如果存在无法改变自重的情况时，可能是因为改字体仅有 normal 和 bold 两种属性</p></li><li><p><code> line-height</code>行高 ;推荐使用无单位的数字如 1.6 ，其表示为为自身字体大小的 1.6 倍，更明显直观 , 让行高等于高可以达到垂直居中的效果</p></li></ul><p>以上属性都可浓缩为 font 属性，简述时其他值为默认值 ，还有字符间距，首行缩进等</p><h4 id="5-3、background（背景属性）"><a href="#5-3、background（背景属性）" class="headerlink" title="5.3、background（背景属性）"></a>5.3、<code>background</code>（背景属性）</h4><ul><li><p><code>background-color</code> 设置元素的背景图像</p></li><li><p><code>backcground-image: url(&quot;图片地址&quot;)</code> 设置背景图片</p></li><li><p><code>background-repeat</code> ：他有如下属性来设置背景图片</p><table><thead><tr><th>值</th><th>属性</th></tr></thead><tbody><tr><td>repeat</td><td>默认值</td></tr><tr><td>repeat-x</td><td>只向水平方向平铺</td></tr><tr><td>repeat-y</td><td>只向垂直方向平铺</td></tr><tr><td>no-repeat</td><td>不平铺</td></tr></tbody></table></li><li><p><code>background-size</code> 设置背景大小，他有如下值</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>设置背景图片的宽度和高度，第一个值宽度，第二个值高度,如果只是设置-个，第二个值 auto</td></tr><tr><td>percentage</td><td>计算相对位置区域的百分比，第一个值宽度，第二个值高度，如果只是设置-个，第二个值 auto</td></tr><tr><td>cover</td><td>保持图片纵横比并将图片缩放成完全覆盖背景区域的最小大小</td></tr><tr><td>contain</td><td>保持图片纵横比并将图像缩放成适合背景定位区域的最大大小</td></tr></tbody></table></li><li><p><code>background-position</code>该属性设置背景图像的起始位置，其默认值是: 0% 0%</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>left top</td><td>左上角.</td></tr><tr><td>left center</td><td>左中</td></tr><tr><td>left bottom</td><td>左下</td></tr><tr><td>…</td><td>…</td></tr></tbody></table></li></ul><h4 id="5-4、文本属性"><a href="#5-4、文本属性" class="headerlink" title="5.4、文本属性"></a>5.4、文本属性</h4><ul><li><code>text-align</code>: 设置文本位置<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>文本居左排列，默认值</td></tr><tr><td>right</td><td>把文本排列到右边</td></tr><tr><td>center</td><td>把文本排列到中间</td></tr></tbody></table></li><li><code>text-decoration</code> 规定添加到文本的修饰，下划线、上划线、 删除线等<table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>underline</td><td>定义下划线</td></tr><tr><td>overline</td><td>定义上划线</td></tr><tr><td>line-through</td><td>定义删除线</td></tr></tbody></table></li><li><code>ext-indent</code>文本块中首行文本的缩进</li></ul><pre class=" language-css"><code class="language-css">p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>text-i <span class="token property">ndent</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="5-5、表格属性"><a href="#5-5、表格属性" class="headerlink" title="5.5、表格属性"></a>5.5、表格属性</h4><ul><li><p>表格边框</p><p>指定 CSS 表格边框,使用 border 属性,不过都是双边框</p></li></ul><pre class=" language-css"><code class="language-css">table，td &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>折叠边框<br>border-collapse 属性设置表格的边框是否被折叠成一个单一的边框或隔开</li></ul><pre class=" language-CSS"><code class="language-CSS">table &#123; border-collapse:collapse; &#125;table,td &#123; border: 1px solid black; &#125;</code></pre><ul><li>表格宽度和高度<br>width 和 height 属性定义表格的宽度和高度</li></ul><pre class=" language-css"><code class="language-css">table &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> wi <span class="token property">dth</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span> &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>td &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> hei <span class="token property">ght</span><span class="token punctuation">:</span> <span class="token number">50</span>px&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li>表格文字对齐</li></ul><p>表格中的文本对齐和垂直对齐属性</p><p><code>text- align</code>属性设置水平对齐方式，向左，右,或中心</p><pre class=" language-css"><code class="language-css">td &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>垂直对齐属性设置垂直对齐<br><code>vertical-align</code>属性设置垂直对齐方式，向上，下,或中心</p><pre class=" language-css"><code class="language-css">td &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> bottom<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>表格填充</li></ul><p>如果在表的内容中控制空格之间的边框，应使用 td 和 th 元素的填充属性</p><pre class=" language-css"><code class="language-css">td &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>表格颜色<br>下面的例子指定边框的颜色，和 th 元素的文本和背景颜色</li></ul><pre class=" language-css"><code class="language-css">tab<span class="token number">1</span>e,td,th &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>td &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h1 id="深入-CSS"><a href="#深入-CSS" class="headerlink" title="深入 CSS"></a>深入 CSS</h1><h2 id="二、基础布局和盒模型"><a href="#二、基础布局和盒模型" class="headerlink" title="二、基础布局和盒模型"></a>二、基础布局和盒模型</h2><h3 id="1-选择器特异度"><a href="#1-选择器特异度" class="headerlink" title="1.选择器特异度"></a>1.选择器特异度</h3><p>在给 HTML 元素应用样式时，多个选择器指向同一个元素，会应用优先级高的选择器，而选择器优先级高低是通过权重计算得到的</p><p>权重由<strong>高到低</strong>如下（为了更直观行让内样式加入其中）：</p><p>权重向量： (0, 0, 0, 0)</p><p>行内样式 &gt; ID 选择器 &gt; class&#x2F;属性&#x2F;伪类选择器 &gt; 类型 &#x2F; 伪元素</p><p>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>项目1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>项目1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>项目1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token comment" spellcheck="true">/*权重向量计算示例*/</span>  <span class="token comment" spellcheck="true">/* (0, 1, 3, 1) */</span>  #container <span class="token number">.</span>menu<span class="token number">.</span>menu li<span class="token number">.</span>item<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff4757</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* (0, 1, 2, 1) */</span>  #container <span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">.</span>item<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#7bed9f</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* (0, 1, 1, 1) */</span>  #container li<span class="token number">.</span>item<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffa502</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* (0, 0, 1, 1) */</span>  li<span class="token number">.</span>item<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#5352ed</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* (0, 0, 1, 0) */</span>  <span class="token number">.</span>item<span class="token number">2</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ff6b81</span><span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>因为权重的不同，我们可以写一些基础样式在后面的开发中通过覆盖来达到相应效果来<strong>提高复用性</strong></p><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h3><p>谈到了选择器优先级问题就不得不提继承</p><p><strong>继承概念：</strong> 一般来说某些属性会自动继承其父元素的计算值，除非显式指定一个值；一般来说与文字，颜色等相关属性可以从父级继承的而盒模型相关的属性不可继承 <strong>注意：</strong> inherit 关键字允许显式的声明继承性，它对继承和非继承属性都生效；若父级没有某些相关属性值，则在继承中会使用<strong>初始值（initial）</strong> ，</p><h3 id="3-CSS-求值过程"><a href="#3-CSS-求值过程" class="headerlink" title="3.CSS 求值过程"></a>3.CSS 求值过程</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d66e709b6784a838c7d5919cbd2e05e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="4-什么是布局"><a href="#4-什么是布局" class="headerlink" title="4.什么是布局"></a>4.什么是布局</h3><p>布局可以确定内容的大小和位置和算法；</p><p>三种布局方式：</p><ul><li><strong>常规流：</strong> 顾名思义计算有一些规则，其中有<strong>块级，行级，表格布局，FlexBox，Grid 布局</strong></li><li><strong>浮动流：</strong> 一些元素可做成浮动，如图片的图文置换</li><li><strong>绝对定位：</strong> 可以直接任意改变元素位置但且不会对常规流造成影响</li></ul><h3 id="5-盒模型"><a href="#5-盒模型" class="headerlink" title="5.盒模型"></a>5.<strong>盒模型</strong></h3><p>CSS<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model">盒子模型</a>就是在网页设计中经常用到的 CSS 技术所使用的一种思维模型。 盒子模型（Box Modle）可以用来对元素进行布局，包括<strong>外边距(margin)</strong> ， <strong>边框(border)</strong> ，<strong>内边距(padding)</strong> ，<strong>和实际内容(content)</strong><br>这几个部分。</p><h3 id="6-content-box"><a href="#6-content-box" class="headerlink" title="6.content-box"></a>6.content-box</h3><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/986e09e8979343b18aa9dd1bb51fb890~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%"><p>默认情况下，盒子的 <strong>宽度（width）</strong> 和 <strong>高度（height）</strong> 由 <strong>容量（content）</strong> 决定，如上图。其中<strong>宽度</strong> 为 content box 宽度，取值有长度、百分数、auto；百分数是相对于 conten box 的宽度，auto 是由浏览器根据其他属性确定，<strong>高度</strong> 类似，auto 是由内容高度计算得来，值得注意的是：只有当容器取固定值的时候，高度百分比才生效</p><p><strong>内边距（Padding）概念</strong></p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fae58fa2be71453780ef0ee626e29e96~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"><p><strong>页边距</strong>相当于容器宽度；对于<strong>固定值</strong>， 当其只有一个值时对应每个边； 当其有 2 个值时值对应上下+左右； 有 4 个值时是<strong>顺时针</strong>对应由 padding-top —&gt; padding-left ；对于<strong>百分数</strong>，其取值是相对于容器宽度</p><p><strong>边框（border）</strong> 一般有三种 <code>none</code>不显示、 <code>solid</code>实线、<code>dashed</code>虚线； 可以通过<code>border-方向-宽度/颜色</code> 来组合可以调节粗细颜色等</p><p>例如：</p><pre class=" language-css"><code class="language-css">    border ： <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span>    border—left ：<span class="token number">1</span> px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    border—right ：<span class="token number">2</span>px dotted red<span class="token punctuation">;</span>    border—width ： lpx <span class="token number">2</span>px <span class="token number">3</span>px <span class="token number">4</span>PX'<span class="token punctuation">;</span>    border—style ： solid<span class="token punctuation">;</span>    border—color ： green blue <span class="token punctuation">;</span>    border—left—<span class="token property">width</span> <span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    border—top—<span class="token property">color</span> <span class="token punctuation">:</span>  <span class="token hexcode">#f00</span><span class="token punctuation">;</span></code></pre><p><strong>外边距(margin)</strong> <code>margin-auto</code> 相同块级的 margin-left 和 margin-right 都为 auto 时 可实现水平居中 ; <code> margin collapse</code> 不同块级的 margin-top 和 margin-button 为相同值的时候，会使两个块级冲突；实际效果是在垂直方向上有折叠，会取两者中间的较大者，而不是简单加在一块。</p><h3 id="7-border-box"><a href="#7-border-box" class="headerlink" title="7.border-box"></a>7.border-box</h3><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/843f3d1ab95d40e9a64507b40e29e1c1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%"><p><strong>提示</strong> 不同的 box 可通过<code> box-sizing：border-box；</code>设置，两者区别在于宽和高取值不同<br><em>从两图中可以清楚的看到取值区别</em></p><p>对于<code>border-box</code>如果指定了宽和高，可能会导致内容的溢出，可以使用<code>overflow</code>去控制溢出内容，其有的属性值：<code>visible</code>展示、 <code>hidden</code>隐藏、 <code>scroll</code>滚动，等</p><h3 id="8-块级盒子（Block-box）-和-行级盒子（Inline-box）"><a href="#8-块级盒子（Block-box）-和-行级盒子（Inline-box）" class="headerlink" title="8.块级盒子（Block box） 和 行级盒子（Inline box）"></a>8.块级盒子（Block box） 和 行级盒子（Inline box）</h3><p>在 CSS 中我们广泛地使用两种“盒子” —— <strong>块级</strong> <strong>盒子</strong> (<strong>block box</strong>) 和  <strong>行级盒子</strong> (<strong>inline box</strong>) <strong>。</strong> 这两种盒子会在<strong>页面流</strong>（page flow）和<strong>元素之间的关系</strong>方面表现出不同的行为</p><p><strong>哪那些是块级盒子那些是内联盒子呢？</strong><br>除非特殊指定，诸如标题 (<code>&lt;h1&gt;</code>等) 和段落 (<code>&lt;p&gt;</code>) 默认情况下都是块级的盒子。</p><p>而比如  <code>&lt;a&gt;</code>  元素、 <code>&lt;span&gt;</code>、 <code>&lt;em&gt;</code>  以及  <code>&lt;strong&gt;</code>  和<code>&lt;cite&gt;</code> 、 <code>&lt;code&gt;</code>都是默认处于  <code>inline</code>  状态的。</p><p>我们通过对盒子<code>display</code>属性的设置，比如  <code>inline</code>  或者  <code>block</code> 、<code>inline-block</code>、<code>none</code>（忽略）来控制盒子的外部显示类型。</p><p><strong>区别：</strong> 块级盒子摆放、属性的适用性、和 HTML 的关系 –&gt; 元素生成盒子 等存在不同。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c70aa6c71bb1488996f5d10a44a0f5fc~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%"><h2 id="三、常规流"><a href="#三、常规流" class="headerlink" title="三、常规流"></a>三、常规流</h2><h3 id="1、行级排版上下文"><a href="#1、行级排版上下文" class="headerlink" title="1、行级排版上下文"></a>1、行级排版上下文</h3><p>在只包含行级盒子的时候会创建行级<strong>IFC（lnline Formatting Context）</strong><br><strong>排版规则</strong></p><ul><li>盒子在一行内水平摆放</li><li>一行放不下时，换行显示</li><li>text-align 决定一行内盒子的水平对齐</li><li>vertical-align 决定一个盒子在行内的垂直对齐</li><li>避开浮动（float） 元素</li></ul><h3 id="2、块级排版上下文"><a href="#2、块级排版上下文" class="headerlink" title="2、块级排版上下文"></a>2、块级排版上下文</h3><p>某些容器会创建一个<strong>BFC (Block Formatting Context)</strong><br>比如：<br>根元素 ，浮动、绝对定位、inline-block ，Flex 子项和 Grid 子项 ，overflow 值不是 visible 的块盒 ， display:flow-root；</p><p><strong>排版规则</strong></p><ul><li>盒子从到下摆放</li><li>垂直 margin 合并</li><li>BFC 内盒子的 margin 不会与外面的合并</li><li>BFC 不会和浮动元素重叠</li></ul><h3 id="3、Flex-Box"><a href="#3、Flex-Box" class="headerlink" title="3、Flex Box"></a>3、Flex Box</h3><p>Flex Box 被设计为一维布局模型，并作为一种可以在界面中的项目之间提供空间分布和强大对齐功能的方法，</p><p>可使用<code>display:flex</code>开启 flex 布局， 使用时 flex box 可以按行或按列排列，按<strong>行</strong>排列时分为水平方向的主轴和竖直方向的交叉轴，同理按<strong>列</strong>排列时与按行排列反之</p><ul><li><p><strong>主轴（main axis）</strong> 是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 <strong>main start</strong>  和 <strong>main end</strong>。</p></li><li><p><strong>交叉轴（cross axis）</strong> 是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为  <strong>cross start</strong>  和 <strong>cross end</strong>。</p></li></ul><p>改变主轴方向的布局可用<code>jastify-content: flex-start / flex-end / center / space-between / space-around / space-evenly /</code>如下图：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0d990f9fe654bdbb7b98c5759961489~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"><p>改变交叉轴方向的布局可用<code>align-items: flex-strat</code> &#x2F; <code>flex-end</code> &#x2F; <code>center </code>&#x2F;<code>stretch</code> &#x2F; <code>baseline</code>，相似的改变对应布局只是方向不同，如下图</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06737ed495bd4ba3a637da8fc1d5a3e6~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"><p>也可改变主轴与交叉轴位置，<code>flex-direction: column</code> 即主轴变成了交叉轴，交叉轴变成了主轴，其他设置项不变。</p><p>非固定尺寸的子元素可以同过调整<code>Flex：</code>的属性调整空间的占比</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9275a56d6814e1ba2040b9f11f24e42~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"><h3 id="4、Grid"><a href="#4、Grid" class="headerlink" title="4、Grid"></a>4、Grid</h3><p>grid 是一个二维布局模型，通过划分格子（水平线+垂直线）来实现布局，可以同时控制行和列的部局方式</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c411e043ee9432cb670d0264fccf884~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c37f39318074068b1fbf09a705e4085~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"><p>要开启 grid 布局只需要给外层容器设置<code>display：grid</code>即可；可以用 <code>grid-template-columns/rows：（行/列）</code> 指定宽度（fr 为 grid 布局专用单位）或者使用<code>gap</code>属性统一设置</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fb28c267fcd47e488edbf1fdee95ede~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"><p>也可以用<code>drid-template-area：</code>进行设置，比如要使一个页面如下：头部和底部宽度占全屏，侧边占 1&#x2F;3，内容占 2&#x2F;3</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e5d5b453ac74311bf8ceb9213a909ee~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"><pre><code>&lt;div class=&quot;layout&quot;&gt;    &lt;header&gt; 头 &#123;ß&lt;/header&gt;    &lt;aside&gt; 侧边栏 &lt;/aside&gt;    &lt;main&gt; 内容 &lt;/main&gt;    &lt;footer&gt; 底部 &lt;/footer&gt;&lt;/diV&gt;</code></pre><p>我们可以指定区域</p><pre><code>grid—template—areas ：    &quot;header header header&quot;    &quot;sidebar content content&quot;    &quot;footer footer footer&quot;header &#123; grid-area : header; &#125;aside &#123;  grid-area : sideber; &#125;main &#123;  grid-area : content; &#125;footer &#123;grid—area ：footer; &#125;</code></pre><p>和 flex box 类似有水平方向的行轴有竖直方向的块轴可使用<code>align-items: center / end </code>等（格式同 flex），在对应的格子内实现对齐，</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c10e12daf1984908b533c52f83a71c41~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%"><p>如果行轨道和列轨道<strong>小于</strong>容器还可以使用<code>align-content: center /</code>等（格式同 flex），对轨道进行对齐</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2245d1252ff42cb81639983d82617b5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%"><h2 id="四、文档流"><a href="#四、文档流" class="headerlink" title="四、文档流"></a>四、文档流</h2><p>文档流是文档中可显示对象在排列时所占用的位置&#x2F;空间 ，例如:块元素自上而下摆放，内联元素，从左到右摆放</p><p>标准流里面的限制非常多，导致很多页面效果无法实现</p><ol><li>高矮不齐，底边对齐</li><li>空白折叠现象</li><li>无论多少个空格、换行、tab, 都会折叠为一个空格</li><li>如果我们想让 img 标签之间没有空隙，必须紧密连接</li></ol><p>怎么解决呢？</p><h2 id="五、浮动流（float）"><a href="#五、浮动流（float）" class="headerlink" title="五、浮动流（float）"></a>五、浮动流（float）</h2><p>主要实现字图环绕，更多的用常规布局替代，可使用<code>float: left/right</code>开启，会脱离文档流，出现覆盖的情况；通俗点说就是浮动流都在新的一层，可以用来左对齐，或者右对齐</p><h2 id="六、绝对定位"><a href="#六、绝对定位" class="headerlink" title="六、绝对定位"></a>六、绝对定位</h2><p><strong>position 属性</strong></p><ul><li><p><strong>static</strong> 默认值 ， 非定位元素，参与常规流的布局</p></li><li><p><strong>relative</strong>也会产生占用空间，相对自身原本位置偏移 ，不脱离文档流</p></li><li><p><strong>absolute</strong> 完全脱离，不占空间，绝对定位 ，相对非 static 祖先元素定位</p></li><li><p><strong>fixed</strong>相对于视囗绝对定位</p></li></ul><p><strong>温馨提示</strong></p><p>设置定位之后，相对定位和绝对定位他是相对于具有定位的父级元素进行位置调整，如果父级元素不存在定位，则继续向上逐级寻找，直到顶层文档</p><p>说人话就是：如果含有 position 属性的大盒子里面有一个也含有 position 属性的小盒子，那么小盒子会跟着大盒子一起移动</p><p>那么就引出了一个小知识：</p><p><strong><code>Z-index</code></strong></p><p>zindex 属性设置元素的堆叠顺序，属性值为 number（1、2、3…）。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面，那么谁上谁下就不一定了（doge）</p><h2 id="七、CSS3-新特性"><a href="#七、CSS3-新特性" class="headerlink" title="七、CSS3 新特性"></a>七、CSS3 新特性</h2><h3 id="1、圆角效果"><a href="#1、圆角效果" class="headerlink" title="1、圆角效果"></a>1、圆角效果</h3><p>使用<code>border-radius</code>属性即可，属性值可以调节圆角度数</p><ul><li>四个值:第一个值为左上角，第二个值为右上角,第三个值为右下角，第四个值为左下角（<strong>左上——&gt;左下，顺时针</strong>）</li><li>三个值:第一个值为左上角,第二个值为右上角和左下角,第三个值为右下角（<strong>不建议使用</strong>）</li><li>两个值:第一个值为左上角与右下角，第二个值为右上角与左下角（<strong>对角</strong>）</li><li>一个值:四个圆角值相同</li></ul><h3 id="2、阴影"><a href="#2、阴影" class="headerlink" title="2、阴影"></a>2、阴影</h3><p><code>box-shadow</code>向框添加一个或多个阴影。</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span> h-shadow v-shadow b<span class="token number">1</span>ur color<span class="token punctuation">;</span></code></pre><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>h-shadow</td><td>必选，水平阴影的位置</td></tr><tr><td>v-shadow</td><td>必选，垂直阴影的位置</td></tr><tr><td>blur</td><td>可选，模糊距离</td></tr><tr><td>color</td><td>可选，阴影的颜色</td></tr></tbody></table><h3 id="3、-keyframes创建动画"><a href="#3、-keyframes创建动画" class="headerlink" title="3、@keyframes创建动画"></a>3、<code>@keyframes</code>创建动画</h3><p>动画是使元素从一种样式逐渐变化为另一种样式的效果</p><p>可以改变任意多的样式任意多的次数，用百分比来规定变化发生的时间，或用关键词”from”和”to”，等同于 0%（开始）和 100%（完成）</p><p>使用<code>@keyframes</code>规则,你可以创建动画</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> name &amp;#123<span class="token punctuation">;</span></span>from |<span class="token number">0%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  css样式&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>percent&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  css样式&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>to|<span class="token number">100%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  css样式&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><code>name</code>:动画名称,开发人员自己命名;</p><p><code>percent</code>:为百分比值,可以添加多个百分比值;</p><h3 id="4、animation执行动画"><a href="#4、animation执行动画" class="headerlink" title="4、animation执行动画"></a>4、<code>animation</code>执行动画</h3><pre class=" language-css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> name duration timi ng-function delay iteration-count di recti on<span class="token punctuation">;</span></code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>设置动画的名称</td></tr><tr><td>duration</td><td>设置动画的持续时间</td></tr><tr><td>timing-function</td><td>设置动画效果的速率</td></tr><tr><td>delay</td><td>设置动画的开始时间(延时执行)</td></tr><tr><td>iteration-count</td><td>设置动画循环的次数，infinite 为无限次数的循环</td></tr><tr><td>direction</td><td>设置动画播放的方向： normal（正向） 和 alternate（反向）</td></tr><tr><td>animation-play-state</td><td>控制动画的播放状态: running 代表播放， 而 paused 代表停 止播放</td></tr></tbody></table><p>timing-function 的值为：</p><ul><li>ease 逐渐变慢(默认)</li><li>linear 匀速</li><li>ease-in 加速</li><li>ease-out 减速</li><li>ease-in-out 先加速后减速</li></ul><p>例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token number">.</span>animation &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background-coor</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> anima <span class="token number">5</span>s linear <span class="token number">5</span>s infinite<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span><span class="token property">animation</span><span class="token punctuation">:</span> hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    animation-play- <span class="token property">state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@keyframes</span> anima &amp;#123<span class="token punctuation">;</span></span><span class="token number">0%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">50%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">100%</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> b<span class="token number">1</span>ueviolet<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="5、媒体查询"><a href="#5、媒体查询" class="headerlink" title="5、媒体查询"></a>5、媒体查询</h3><ul><li>媒体查询能使页面在不同在终端设备下达到不同的效果</li><li>媒体查询会根据设备的大小自动识别加载不同的样式</li></ul><ol><li>设置 meta 标签</li></ol><p>使用设备的宽度作为视图宽度并<strong>禁止初始的缩放</strong>。在<code>&lt;head&gt;</code>标签里加入这个 meta 标签。</p><pre class=" language-css"><code class="language-css">&lt;meta name=<span class="token string">"viewport"</span>      content="width=device-width， initial-scale=<span class="token number">1</span>, maxi mum-scale=<span class="token number">1</span>，user-scalab<span class="token number">1</span>e=no"></code></pre><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19265bcddad147bc8a8dd41fb7e6e3d0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%"><ol start="2"><li>语法<br><code>max-width</code>最大宽度 <code>min-width</code>最小宽度</li></ol><pre class=" language-css"><code class="language-css"><span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 可视为手机端 */</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 可视为iPad端*/</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> and <span class="token punctuation">(</span>max <span class="token property">-width</span><span class="token punctuation">:</span> 996px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*可视为电脑端*/</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 996px<span class="token punctuation">)</span> &amp;#123<span class="token punctuation">;</span></span>  <span class="token number">.</span>box &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>以上只是控制背景颜色，还可以更改标签是否显示等</p><h3 id="6、-雪碧图"><a href="#6、-雪碧图" class="headerlink" title="6、 雪碧图"></a>6、 雪碧图</h3><p>CSS Sprite 也叫 CSS 精灵图、CSS 雪碧图，是一种网页图片应用处理方式。它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去</p><p>最常见于表情，比如：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82dd521c29de4668ab6bfa34c85bb67d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>优点</strong></p><ul><li>减少图片的字节</li><li>减少网页的 http 请求,从而大大的提高页面的性能</li></ul><p><strong>原理</strong></p><ul><li>通过 background-image 引入背景图片</li><li>通过 background-position 把背景图片移动到自己需要的位置</li></ul><p>示例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token number">.</span>icon<span class="token number">1</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>   // 改变 i 标签为块级元素    <span class="token property">display</span><span class="token punctuation">:</span> b<span class="token number">1</span>ock<span class="token punctuation">;</span>    //引入有很多标签的大图片    background- <span class="token property">image</span><span class="token punctuation">:</span> ur<span class="token number">1</span><span class="token punctuation">(</span><span class="token number">1.</span> png<span class="token punctuation">)</span><span class="token punctuation">;</span>    //调整大图片的位置，直到得到完整的所需表情    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">20</span>px <span class="token number">0</span><span class="token punctuation">;</span>    // i 组件的宽高    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">70</span>px<span class="token punctuation">;</span><span class="token number">.</span>icon<span class="token number">2</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> b<span class="token number">1</span>ock<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> ur<span class="token number">1</span><span class="token punctuation">(</span><span class="token number">1.</span> png<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">93</span>px -<span class="token number">84</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">70</span>px<span class="token punctuation">;</span></code></pre><h3 id="7、字体图标"><a href="#7、字体图标" class="headerlink" title="7、字体图标"></a>7、字体图标</h3><p>我们会经常用到一些图标。但是我们在使用这些图标时，往往会遇到失真的情况,而且图片数量很多的话，页面加载就越慢。所以,我们可以使用字体图标的方式来显示图标，既解决了失真的问题，也解决了图片占用资源的问题</p><p><strong>优点</strong></p><ul><li>轻量性:加载速度快,减少 http 请求</li><li>灵活性:可以利用 CSS 设置大小颜色等</li><li>兼容性:网页字体支持所有现代浏览器，包括 IE 低版本</li></ul><p>使用字体图标</p><ol><li>进入<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a>注册账号并登录</li><li>选取图标或搜索图标</li><li>添加购物车</li><li>下载代码</li><li>添加到项目里</li><li>选择 font-class 引用</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./font/iconfont.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>7.挑选相应图标并获取类名，应用于页面:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-xxx(地址) xxx(使用时大小默认) <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CSS 目前已经大致更新完善了，但是还是会更新以后遇到的新知识，也有在 b 站学习知识，感谢您的阅读和赞赏~!</p><p><strong>本文如有错误欢迎纠正指正! <a href="https://link.juejin.cn/?target=https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0069c4ff46a449ba432e2d1a89438fb~tplv-k3u1fbpfcp-zoom-1.image" title="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0069c4ff46a449ba432e2d1a89438fb~tplv-k3u1fbpfcp-zoom-1.image">😊</a></strong></p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>选择器——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">知识充电</a></p><p>CSS 属性——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/attr">知识充电</a></p><p>CSS 如何工作——<a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works">知识充电</a></p><p>CSS 文档——<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">知识充电</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白够用的HTML笔记</title>
      <link href="/breezeblog.gitee.io/posts/b184.html"/>
      <url>/breezeblog.gitee.io/posts/b184.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇我有意写成类似 HTML 参考文档的形式，方便以后复习查阅~</p><h2 id="快速入门标签"><a href="#快速入门标签" class="headerlink" title="快速入门标签"></a>快速入门标签</h2><h3 id><a href="#" class="headerlink" title></a><!--...--></h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--这是一段注释。注释不会在浏览器中显示。--></span></code></pre><p>可以使用 <strong>Ctrl+&#x2F;</strong> 快捷键来快速注释代码</p><h3 id="lt-DOCTYPE-gt"><a href="#lt-DOCTYPE-gt" class="headerlink" title="&lt;!DOCTYPE&gt;"></a><code>&lt;!DOCTYPE&gt;</code></h3><p><code>&lt;!DOCTYPE&gt;</code> 声明必须是 HTML 文档的第一行，位于<code>&lt;html&gt;</code>标签之前。标记当前 HTML 文件是什么样的 HTML 版本，浏览器根据此决定页面的渲染</p><h3 id="lt-html-gt"><a href="#lt-html-gt" class="headerlink" title="&lt;html&gt;"></a><code>&lt;html&gt;</code></h3><p>根标签,<code>&lt;html&gt;</code> 与 <code>&lt;/html&gt;</code> 标签限定了文档的开始点和结束点，在它们之间是文档的头部和主体。</p><h3 id="lt-head-gt"><a href="#lt-head-gt" class="headerlink" title="&lt;head&gt;"></a><code>&lt;head&gt;</code></h3><p><code>&lt;head&gt;</code> 标签用于定义文档的头部，它是所有头部元素的容；下面这些标签可用在 head 部分：<code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;title&gt;</code>。 <code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p><h3 id="lt-body-gt"><a href="#lt-body-gt" class="headerlink" title="&lt;body&gt;"></a><code>&lt;body&gt;</code></h3><p>body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</p><h3 id="lt-h1-gt-lt-h6-gt-（块级）"><a href="#lt-h1-gt-lt-h6-gt-（块级）" class="headerlink" title="&lt;h1&gt; - &lt;h6&gt;（块级）"></a><code>&lt;h1&gt; - &lt;h6&gt;</code>（块级）</h3><p>为标题字体大小，<code>&lt;h1&gt;</code> 定义最大的标题。<code>&lt;h6&gt;</code> 定义最小的标题。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><p>效果如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0597fdd1681248a7a767eabf80998ad8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="15"></p><h3 id="lt-p-gt-（块级）"><a href="#lt-p-gt-（块级）" class="headerlink" title="&lt;p&gt; （块级）"></a><code>&lt;p&gt;</code> （块级）</h3><p>定义段落 ; p 元素会自动在其前后创建一些空白。浏览器会自动添加这些空间，您也可以在样式表中规定。</p><h3 id="lt-hr-gt-（块级）"><a href="#lt-hr-gt-（块级）" class="headerlink" title="&lt;hr/&gt;（块级）"></a><code>&lt;hr/&gt;</code>（块级）</h3><p>横线单标签，有以下属性：</p><ol><li>color:设置水平线的颜色</li><li>width:设置水平线的宽度</li><li>size:设置水平线的高度</li><li>align:设置水平线的对齐方式(默认居中)，可取值<code>left</code>|<code>right</code></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20%<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2px<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>效果入下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32da5839ed184017baf58df5938c3a7f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>当然后面建议使用 css 写样式</p><h3 id="lt-br-gt"><a href="#lt-br-gt" class="headerlink" title="&lt;br/&gt;"></a><code>&lt;br/&gt;</code></h3><p>换行单标签，可以插入文章描述里实现换行</p><h3 id="lt-img-gt-（行内块级）"><a href="#lt-img-gt-（行内块级）" class="headerlink" title="&lt;img&gt;（行内块级）"></a><code>&lt;img&gt;</code>（行内块级）</h3><p>图片组件，有以下属性：</p><ol><li>src: 路径(图片地址与名字)</li><li>alt：alt 为图片未被加载的替代性文本</li><li>width: 规定图像的宽度</li><li>height:规定图像的高度</li><li>title:鼠标悬停在图片上给予提示</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/image/0.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片暂未加载<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是提示<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="lt-a-gt-（内联）"><a href="#lt-a-gt-（内联）" class="headerlink" title="&lt;a&gt;（内联）"></a><code>&lt;a&gt;</code>（内联）</h3><p>超链接标签，需要添加<code>href</code>属性来实现跳转功能，可以在标签里添加文本，图片等也能实现跳转</p><ol><li><code>href </code>属性来描述链接的地址</li><li>默认情况下个未访问过的链接显示为蓝色字体并带有下划线。</li><li>我们可以通过 css 来修改默认情况下的样式，并且还可以修改访问前，访问后，鼠标悬停在链接上时等样式</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://w.wallhaven.cc/full/k7/wallhaven-k7o551.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://w.wallhaven.cc/full/k7/wallhaven-k7o551.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/image/1.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是提示<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/382710e8bbb145ac8f5d1bf82d46506b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%"><h2 id="块元素和内联元素"><a href="#块元素和内联元素" class="headerlink" title="块元素和内联元素"></a>块元素和内联元素</h2><p>虽然到了 HTML5 的版本，元素分类更细致了,但是这对初学者并不友好,所以我们仍然按照块元素和内联元素做区分，这对我们的布局起到了至关重要的作用</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68ed28d420ba4ead90fffec726d686f6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>行内块级元素(特点:不换行、能够识别宽高)<br>1、和其他元素都在一行上；<br>2、元素的高度、宽度、行高以及顶和底边距都可设置</p><ul><li><p>常见块级元素<br><code>&lt;hr&gt;、&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</code>……</p></li><li><p>常见内联元素<code>&lt;b&gt;、&lt;a&gt;、&lt;span&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</code>……</p></li><li><p>行内块级元素<br><code>&lt;button&gt;、&lt;img&gt;、 &lt;input&gt;</code>……</p></li></ul><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><h3 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h3><p><strong>都是内联元素</strong></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--着重--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--粗体--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--斜体--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--加重--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--删除字--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--无特殊含义--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d8c61f92d1b4c84a0619c73921fa506~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="引用标签"><a href="#引用标签" class="headerlink" title="引用标签"></a>引用标签</h3><p><code>&lt;blockquote&gt;</code>标记长的引用 <code>&lt;q&gt;</code>用来定义短的引用 <code>&lt;code&gt;</code>定义计算机代码文本</p><p>属性：</p><ul><li><code>cite</code>属性用来规定引用的来源</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span> <span class="token attr-name">cite</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span></code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p><code>&lt;dl&gt;</code> 、<code>&lt;dt&gt;</code> 、<code>&lt;dd&gt;</code> 都是块级元素</p><p>一般在展示的列表形式包括标题和描述两部分时，使用定义列表<br><code>&lt;dl&gt;&lt;/dl&gt;</code>：定义列表；<br><code>&lt;dt&gt;&lt;/dt&gt;</code>:标题；<br><code>&lt;dd&gt;&lt;/dd&gt;</code>:分支描述（多对多）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre><p>效果如下：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c06c1973294446e82c3eb68ec4ee077~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="60"></p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p><code>&lt;ol&gt;</code> 和 <code>&lt;li&gt;</code>标签都是块级元素</p><p>有序列表是一列项目，列表项目使用数字进行标记。有序列表始于<code>&lt;ol&gt;</code>标签。每个列表项始于<code>&lt;i&gt; </code>标签。 可嵌套</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>效果如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0d8720b704c44c4b44cfe54c451400b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="80"></p><p><strong><code>&lt;b1&gt;</code>的属性<code>type</code></strong> 拥有的选项</p><ul><li><code>1</code>表示列表项目用数字标号(1.23…</li><li><code>a</code>表示列表项目用小写字母标号(a,b,c、…)</li><li><code>A</code>表示列表项目用大写字母标号(A,B,C、…)</li><li><code>i</code>表示列表项目用小写罗马数字标号(i、ii、iii、…)</li><li><code>|</code>表示列表项目用大写罗马数字标号(I、II、III、…）</li></ul><p><strong><code>&lt;ol&gt;</code>的快捷键：</strong> <code>ul&gt;li*n</code>(n 是要生成 li 标签的数量)，同理可以以相同类似推广组合比如：<code>ul&gt;li*3&gt;a</code></p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><code>&lt;ul&gt;</code> 和 <code>&lt;li&gt;</code>标签都是块级元素</p><p>无序列表是一个项目的列表，此列项目使用粗体圆点(典型的小黑圆圈)进行标记，无序列表始于<code>&lt;ul&gt;</code>标签；每个列表项始于<code>&lt;li&gt;</code>标签。 可嵌套； 常用于列表导航、无序的列表效果…</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>效果如下：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/944393b5412f4c56afc2db3e3f95aebd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="80"></p><p><strong><code>&lt;ul&gt;</code>的<code>type</code>的属性</strong>type 拥有的选项</p><ul><li><code>disc</code> 默认实心圆</li><li><code>circle</code> 空心圆</li><li><code>square</code> 小方块</li><li><code>none</code> 不显示</li></ul><p><strong><code>&lt;ul&gt;</code>的快捷键：</strong> <code>ul&gt;li*n</code>(n 是要生成 li 标签的数量)</p><h3 id="列表下拉选择"><a href="#列表下拉选择" class="headerlink" title="列表下拉选择"></a>列表下拉选择</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>效果如下：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc190b94e44343f88ac02b5e51c62855~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50"><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>和<code>&lt;td&gt;</code>都是块级元素</p><p>表格由：行、列、单元格组成；表格标签有</p><ul><li>表格:<code>&lt;table&gt;</code></li><li>行:<code>&lt;tr&gt;</code></li><li>单元格(列):<code>&lt;td&gt;</code></li></ul><p><strong>表格属性</strong></p><ul><li>border: 设置表格的边框</li><li>width: 设置表格的宽度</li><li>height: 设置表格的高度</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b09b62234584fc39f86a085347736ba~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>快捷键：<code>table&gt;tr*n&gt;td*m&#123;单元格的文本信息&#125;</code>（n：行数量，m：列数量）</p><h3 id="单元格合并"><a href="#单元格合并" class="headerlink" title="单元格合并"></a>单元格合并</h3><ul><li><strong>水平合并（colpan）</strong> : 保留左边，删除右边</li><li><strong>垂直合并（rowspan）</strong>: 保留上边，删除下边</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;td>4&lt;/td>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;td>8&lt;/td>--></span>    <span class="token comment" spellcheck="true">&lt;!--&lt;td>9&lt;/td>--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>可见 <code>colspan</code> 和 <code>rowspan</code> 的值对应的是合并单元格的数量，并且要删除对应单元格 ，如果不删除，则会直接生成对应大小的单元格 ，会把部分单元格”顶”出去</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa296cc9844c45a790dfea529a28de53~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%"><p>那问题来了，如果要合并井字（比如：合并 2 3 5 6）单元格怎么办？</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="Form-表单-块级"><a href="#Form-表单-块级" class="headerlink" title="Form 表单(块级)"></a>Form 表单(块级)</h3><p>表单是由容器和控件组成的，一个表单一般应该包含用户填写信息的输入框,提交按钮等,这些输入框,按钮叫做控件，表单就是容器，它能够容纳各种各样的控件</p><p><strong>属性说明</strong></p><ul><li>action 服务器地址</li><li>name 表单名称</li><li>method 中 Get 和 Post 的区别(目前了解即可)：<ul><li>数据提交方式，get 把提交的数据 url 可以看到，post 看不到</li><li>get- 般用于提交少量数据，post 用来提交大量数据</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFrom<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><strong>表单元素</strong><br><code>input</code>为行内块级元素</p><p>完整的表单包含三个基本组成部分:表单标签、表单域、表单按钮</p><ul><li>表单标签:输入框，按钮等</li><li>表单域：输入范围</li><li>表单按钮：submit</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFrom<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get/post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--表单控件--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fabfca6d61bb4aedab038d405d5867dd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><ul><li>文本框</li></ul><p>文本域通过<code>&lt;input tye=&quot;text&quot;&gt;</code>标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7181d1d830444e4d94f41e251eb84d8f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>密码框</li></ul><p>密码字段通过标签<code>&lt;input type=&quot;password&quot;&gt;</code>来定义</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>Password: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> pwd<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfd53407287f466fb2f056b9cdaeda98~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ul><li>提交按钮</li></ul><p>输入完信息点击提交，会将信息提交给另一个页面或者服务器，再做相关处理</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> Password:  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> pwd<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5faa1d92c5c45f9b86040fa052f68bc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><h3 id="lt-audio-gt"><a href="#lt-audio-gt" class="headerlink" title="&lt;audio&gt;"></a><code>&lt;audio&gt;</code></h3><p>音频组件，control 表示是否默认播放控件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><h3 id="lt-video-gt"><a href="#lt-video-gt" class="headerlink" title="&lt;video&gt;"></a><code>&lt;video&gt;</code></h3><p>视频组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><h3 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a><code>&lt;input&gt;</code></h3><p>输入框，</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placehoder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">`</span> <span class="token punctuation">/></span></span></code></pre><ul><li>placehoder 为未输入时的占位符</li><li>type 有多种属性值可以调节输入范围</li></ul><pre class=" language-HTML"><code class="language-HTML">    <input type="range">    <input type="number" max="10" min="1">    <input type="date" max="10" min="1"></code></pre><p>效果如下：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ba8003459d049a18c61c4fcb8aca6df~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"></p><p><strong>单选框和复选框</strong></p><p>chekbox 为复选，radio 为单选互斥关系由 name 相同达到的</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>复选：</p><pre class=" language-HTML"><code class="language-HTML">    <input type="checkbox">a    <input type="checkbox" checked>b</code></pre><p>效果如下：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f338fb00c4694278b645afe5611991ae~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width></p><p>单选：</p><pre class=" language-HTML"><code class="language-HTML">    <input type="radio" name="c">a    <input type="radio" name="c">b</code></pre><p>效果如下：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00fd8023b9b54f598942f20c7de0dbda~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width><p><strong>提示输入</strong></p><p>多个标签<strong>提示</strong>输入,list 来指定用户可以有的提示选项</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ipute</span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>和<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ipute</span><span class="token punctuation">></span></span></code></pre><p>例如：</p><pre class=" language-HTML"><code class="language-HTML">    <input lest="countries">    <select id="countries">      <option>green</option>      <option>Yellow</option>      <option>Blue</option>    </select></code></pre><p>效果如下：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41da2e86348c4f8f93845161f22ad463~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"><h3 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="&lt;textarea&gt;"></a><code>&lt;textarea&gt;</code></h3><p><code>&lt;textarea&gt;&lt;/textarea&gt;</code>:文本域，可多行输入</p><h2 id="页面内容划分"><a href="#页面内容划分" class="headerlink" title="页面内容划分"></a>页面内容划分</h2><p>页面内容一般分为 4 部分：<code>header</code>，<code>main</code>，<code>aside</code>，<code>footer</code>，</p><ul><li><code>header</code>中常常含有 log，nav（导航标签）等</li><li><code>main</code>中则是 article 文章部分，main 只有一个为文章主体部分</li><li><code>aside</code>表示与内容相关但不属于文章内容，常常放置广告等，</li><li><code>footer</code>位于页未一般放参考链接，版权信息等</li></ul><p>刚开始是使用<code>div</code>容器元素，让代码模块化，来实现页面内容划分，但是我们发现效率并不是很高</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f72e81af18324bae8d191e27194b994f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%"><p>所以在 HTML5 直接推出了新标签来划分页面内容</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a63c94671c2046b3b1de063ff978d327~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%">    <p>两者对比</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53af1d2b31674b2daff8029b13eb59c7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%">很明显新标签更容易理解，搜索引擎也会有有相应优化，所以推荐使用新标签来划分页面内容<h2 id="语义化的理解"><a href="#语义化的理解" class="headerlink" title="语义化的理解"></a>语义化的理解</h2><p>随着时间的推移，为了可以更清晰的表述出需要的结构和内容，标签会进行迭代更新，会存在新的标签的产生，而 HTML 所有的元素，属性，属性值，都有一些特定的含义，我们应该遵循语义来进行开发</p><p>比如在如下应用场景：</p><ul><li><p>开发者-修改、维护页面——-&gt;代码可读性,可维护性</p></li><li><p>浏览器-展示页面,搜索引擎-提取关键词、排序———-&gt;搜索引擎优化</p></li><li><p>屏幕阅读器－给盲人读页面内容——&gt;提升无障碍性</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说了那么多来做个小小的总结：这是一篇小白的笔记，内容不多也不深，我觉得我奶奶来了都能看懂，就提了一些 HTML 的标签以及简单食用方法，加上一点语义化的理解。立意<strong>重在建立学习框架</strong>，对于做好语义化可以在<a harf="https://developer.mozilla.org/zh-CN/" target="_blank">MDN</a>里面学习更多更深的 HTML 知识，规范书写代码，不使用可视化工具生成代码。</p><p><strong>本文如有错误欢迎纠正指正! <a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0069c4ff46a449ba432e2d1a89438fb~tplv-k3u1fbpfcp-zoom-1.image">😊</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上万字的JavaScript基础总结</title>
      <link href="/breezeblog.gitee.io/posts/5199.html"/>
      <url>/breezeblog.gitee.io/posts/5199.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己学习学习的 JavaScript 基础，并记录成笔记！</p><h2 id="如何引入-JavaScirpt"><a href="#如何引入-JavaScirpt" class="headerlink" title="如何引入 JavaScirpt"></a>如何引入 JavaScirpt</h2><p>JavaScript 代码可以直接嵌在网页的任何地方</p><p><strong>内部引入</strong>：是由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是 JavaScript 代码，它将直接被浏览器执行。</p><p><strong>外部引入</strong>：是把 JavaScript 代码放到一个单独的<code>.js</code>文件，然后在 HTML 中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件。</p><p><strong>代码示例</strong></p><pre class=" language-JS"><code class="language-JS">//内部引入< script >< /script>// 外部引入<head>  <script src="/static/js/abc.js"></script></head></code></pre><p><strong>建议：</strong> 把 js 放在 html 代码结束处，这样可以让页面先渲染再跑 js，可以避免页面卡住</p><p>很多语法和 Java 差不多，比如循环等</p><h1 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义变量</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span><span class="token string">'Hello, world'</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不建议一行写多个语句!</span><span class="token comment" spellcheck="true">//循环</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//常用输出语句</span>alert（）<span class="token punctuation">;</span>console<span class="token punctuation">.</span>log（）<span class="token punctuation">;</span></code></pre><h2 id="1、Number"><a href="#1、Number" class="headerlink" title="1、Number"></a>1、Number</h2><p>JavaScript 不区分整数和浮点数，统一用 Number 表示；可以直接做四则运算，规则和数学一致</p><pre class=" language-js"><code class="language-js"><span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 整数123</span><span class="token number">0.456</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 浮点数0.456</span><span class="token number">1.2345e3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 科学计数法表示1.2345x1000，等同于1234.5</span><span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 负数</span><span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN表示Not a Number，当无法计算结果时用NaN表示</span><span class="token number">Infinity</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity*/</span></code></pre><h2 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h2><h3 id="2-1、转义字符"><a href="#2-1、转义字符" class="headerlink" title="2.1、转义字符"></a>2.1、转义字符</h3><p>JavaScript 的字符串就是用 <strong><code>&#39;&#39;</code></strong> 或 <strong><code>&quot;&quot;</code></strong> 括起来的字符表示。<br>如果字符串内部既包含 <strong><code>&#39;</code></strong> 又包含 <strong><code>&quot;</code></strong> 怎么办？</p><p>比如：</p><pre class=" language-js"><code class="language-js"><span class="token string">'I'</span>m <span class="token string">"OK"</span><span class="token operator">!</span>'<span class="token punctuation">;</span></code></pre><p>可以使用 <strong><a href="https://zhuanlan.zhihu.com/p/297998732">转义字符</a></strong></p><p><strong>转义字符</strong>可以转义很多字符，</p><ul><li><code>\n</code>表示换行</li><li><code>\&#39;</code>表示<code>&#39;</code></li><li><code>\t</code>表示制表符</li><li><code>\\</code>表示的字符就是 <code>\</code></li><li>ASCII 字符可以以<code>\x##</code>形式的十六进制表示</li><li><code>\u####</code>表示一个 Unicode 字符</li></ul><h3 id="2-2、多行字符串"><a href="#2-2、多行字符串" class="headerlink" title="2.2、多行字符串"></a>2.2、多行字符串</h3><p>js 里可以使用单引号表示多行字符串</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//单引号在Tab按键的上方</span><span class="token template-string"><span class="token string">`这是一个多行字符串`</span></span><span class="token punctuation">;</span></code></pre><h3 id="2-3、模板字符串"><a href="#2-3、模板字符串" class="headerlink" title="2.3、模板字符串"></a>2.3、模板字符串</h3><p>JS 里可以使用<code>$&#123;&#125;</code>快速拼接字符串与变量</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置变量age</span><span class="token comment" spellcheck="true">//在Java中：</span><span class="token string">"小明"</span> <span class="token operator">+</span>  age <span class="token operator">+</span>  <span class="token string">"岁了"</span><span class="token comment" spellcheck="true">// 在JS中也可以这样写，但还可以实现多行字符串编写和模板字符串</span>  <span class="token template-string"><span class="token string">`小明$&amp;#123;age&amp;#125;岁了`</span></span><span class="token punctuation">;</span></code></pre><h3 id="2-4、字符串长度"><a href="#2-4、字符串长度" class="headerlink" title="2.4、字符串长度"></a>2.4、字符串长度</h3><p>用 <strong><code>.length</code></strong> 来获取字符串长度</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 13</span></code></pre><p>那我们怎么看字符串长度呢？</p><ol><li><strong>不带转义字符的字符</strong><br>如：<code>abc ,!x=/</code> ，其长度为  9 (注意有空格)</li><li><strong>带转义字符的字符</strong><br>如： <code>abc !,\n</code> ，其中的<code>\n</code>为转义字符（换行符），计算字符串长度时只能计作一个字符，所以该字符串的长度为 7</li><li><strong>特殊转义符的字符串</strong><br>如：<code>abcd\0ef</code> ，其中转义字符 <code>\0</code> 是字符串结束符，所以在计算长度时为 4</li><li><strong>反斜杠</strong><br>如： <code>abc !,\\n</code> ， 因为反斜杠不能作为任何合法的字符，所以是转义符<code>\\</code>加上 n 长度为 8</li></ol><h3 id="2-5、-不可变性"><a href="#2-5、-不可变性" class="headerlink" title="2.5、 不可变性"></a>2.5、 不可变性</h3><p>字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果</p><h2 id="3、布尔值"><a href="#3、布尔值" class="headerlink" title="3、布尔值"></a>3、布尔值</h2><p>一个布尔值只有<code>true</code>、<code>false</code>两种值 ； <code>||</code>运算是或运算 ； <code>!</code>运算是非运算 ；<br><code>&amp;&amp;</code>运算是与运算</p><h2 id="4、比较运算符"><a href="#4、比较运算符" class="headerlink" title="4、比较运算符"></a>4、比较运算符</h2><p>在 JS 里 <strong>不要</strong> 使用<code>==</code>比较 ，使用<code>===</code>比较</p><pre class=" language-js"><code class="language-js"><span class="token operator">=</span>  <span class="token comment" spellcheck="true">//赋值</span><span class="token operator">==</span> <span class="token comment" spellcheck="true">//类型不一样，值一样，也就是比较类型</span><span class="token operator">===</span> <span class="token comment" spellcheck="true">// 和Java的 == 一样</span></code></pre><p><code>NaN</code>这个特殊的 Number 与所有其他值都不相等 ， 包括它自己;<br>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>判断是否为<code>true </code></p><pre class=" language-js"><code class="language-js"><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>尽量避免使用浮点数进行运算，存在精度问题 , 只能计算它们之差的绝对值，看是否小于某个阈值</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false3</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.0000001</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="5、null-和-undefined"><a href="#5、null-和-undefined" class="headerlink" title="5、null 和 undefined"></a>5、null 和 undefined</h2><p><code>null</code>表示一个 空 的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为 0 的字符串，而<code>null</code>表示 什么都没有；</p><p>而<code>undefined</code>表示值未定义，仅仅在<strong>判断函数参数是否传递</strong>的情况下有用</p><h2 id="6、strict-模式"><a href="#6、strict-模式" class="headerlink" title="6、strict 模式"></a>6、strict 模式</h2><p>因为 JS 比较随意，容易出现 bug，所以可以在第一行写 <code>&#39;user strict;&#39; </code>，开启严格检查模式，这样会避免很多问题</p><h1 id="二、操作字符串"><a href="#二、操作字符串" class="headerlink" title="二、操作字符串"></a>二、操作字符串</h1><h2 id="1、返回指定位置的字符"><a href="#1、返回指定位置的字符" class="headerlink" title="1、返回指定位置的字符"></a>1、返回指定位置的字符</h2><p><strong><code>charAt()</code></strong> 返回指定位置的字符，参数是从 0 开始编号的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span> <span class="token string">'litbaizhan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "t"</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>1ength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "n"，返回最后一位</span></code></pre><p>如果参数为负数，或大于等于字符串的长度，charAt 返回空字符串</p><h2 id="2、连接字符串"><a href="#2、连接字符串" class="headerlink" title="2、连接字符串"></a>2、连接字符串</h2><p><strong><code>concat()</code></strong> 用于连接两个字符串，返回一个新字符串，不改变原字符串(其实用<code>+</code>链接更方便)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">"itbaizhan"</span><span class="token punctuation">;</span>vars2 <span class="token operator">=</span> <span class="token string">"sxt"</span><span class="token punctuation">;</span>s1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "itbaizhansxt"</span>s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "itbaizhan"</span><span class="token comment" spellcheck="true">//该方法可以接受多个参数</span><span class="token string">"sxt"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"itbaizhan"</span><span class="token punctuation">,</span> <span class="token string">"bjsxt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "sxtitbaizhanbjsxt"</span></code></pre><p>如果参数不是字符串，<code>concat</code>方法会将其先转为字符串,然后再连接</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> three <span class="token operator">=</span> <span class="token string">'3'</span><span class="token punctuation">;</span><span class="token string">''</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>one， two， three<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "123"</span></code></pre><h2 id="3、大小写转换"><a href="#3、大小写转换" class="headerlink" title="3、大小写转换"></a>3、大小写转换</h2><p><strong><code>.toUpperCase()</code></strong> 全部转化为大写 , <strong><code>.toLowerCase</code></strong> 全部转化为小写</p><h2 id="4、索引"><a href="#4、索引" class="headerlink" title="4、索引"></a>4、索引</h2><p>**<code>.indexOf()</code>**，判断字符串中是否存在某个词汇</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"hello, world"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 7</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有找到指定的子串(大写W)，返回-1</span></code></pre><p><strong><code>indexOf</code></strong> 方法还可以接受第二个参数,表示从该位置开始向后匹配</p><pre class=" language-js"><code class="language-js"><span class="token string">"he11o world"</span><span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7 也就是跳过了第一个o从6开始到了第二个o的位置</span></code></pre><h2 id="5、返回指定索引区间的子串"><a href="#5、返回指定索引区间的子串" class="headerlink" title="5、返回指定索引区间的子串"></a>5、返回指定索引区间的子串</h2><p><strong><code>substring()</code></strong> 返回指定索引区间的子串 ，一定第二个参数大于第一个参数</p><pre><code>var s = &#39;hello, world&#39;s.substring(0, 5); // 从索引0开始到5（不包括5），返回&#39;hello&#39;s.substring(7); // 从索引7开始到结束，返回&#39;world&#39;</code></pre><p><strong><code>substr()</code></strong> 方法的第一个参数是子字符串的开始位置(从 0 开始计算)，第二个参数是子字符串的长度</p><pre class=" language-js"><code class="language-js"><span class="token string">'itbaizhan'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span>，<span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// baizhan</span></code></pre><p>如果省略第二个参数,则表示子字符串一直到原字符串的结束</p><pre class=" language-js"><code class="language-js"><span class="token string">"itbaizhan"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "baizhan'</span></code></pre><p>如果第一个参数是负数,表示倒数计算的字符位置。如果第二个参数是负数,将被自动转为 0,因此会返回空字符串</p><pre class=" language-js"><code class="language-js"><span class="token string">'itbaizhan'</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "baizhan"</span> <span class="token string">'itbaizhan'</span><span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">4</span>， <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ""</span></code></pre><h2 id="6、除字符串两端的空格"><a href="#6、除字符串两端的空格" class="headerlink" title="6、除字符串两端的空格"></a>6、除字符串两端的空格</h2><p><code>trim</code>用于去除字符串两端(不能去除中间)的空格，返回一个新字符串,不改变原字符串</p><pre class=" language-js"><code class="language-js"><span class="token string">"he1lo world"</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "he1loworld"</span></code></pre><p>该方法去除的不仅是空格,还包括制表符(\t、\v)、换行符(\n)和回车符(\r)</p><pre class=" language-js"><code class="language-js"><span class="token string">"\r\nitbaizhan \t"</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'itbaizhan'</span></code></pre><p>ES6 扩展方法，trimEnd()和 trimstar()方法</p><pre class=" language-js"><code class="language-js"><span class="token string">"  itbaizhan  "</span><span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"  itbaizhan" 除去头部空格</span><span class="token string">"  itbaizhan  "</span><span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "itbaizhan  "除去尾部空格</span></code></pre><h2 id="7、分割字符串"><a href="#7、分割字符串" class="headerlink" title="7、分割字符串"></a>7、分割字符串</h2><p><code>split()</code> 方法按照给定规则分割字符串,返回一个由分割出来的子字符串组成的数组</p><pre class=" language-JS"><code class="language-JS">'it|sxt |baizhan'.split('I') // ["it"， "sxt"， "baizhan"]</code></pre><p>如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</p><pre class=" language-JS"><code class="language-JS">'alblc'.split('') // ["a", "I"，"b","I", "c"]</code></pre><p>如果省略参数,则返回数组的唯一成员就是原字符串</p><pre class=" language-JS"><code class="language-JS">'it|sxt|bz'.sp1it() // [it|sxt|bz]</code></pre><p>split 方法还可以接受第二个参数,限定返回数组的最大成员数。</p><pre class=" language-JS"><code class="language-JS">'it|sxt|bz'.split('I', 0) // []'it|sxt|bz' .split('I'，1) // ["it"]'itlsxt|bz'.split('l'， 2) // ["it"， "sxt'"]</code></pre><h1 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h1><p>数组用<code>[]</code>表示，元素之间用<code>,</code>分隔</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token keyword">null</span>，ture，<span class="token string">'hello'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//推荐</span><span class="token keyword">new</span> <span class="token class-name">Array</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token keyword">null</span>，ture，<span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建了数组[1，2，3，4，null，ture，'hello']</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回索引为0的元素，即1</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回索引为5的元素，即true</span>arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 索引超出了范围，返回undefined</span></code></pre><h2 id="1、取得Array的长度"><a href="#1、取得Array的长度" class="headerlink" title="1、取得Array的长度"></a>1、取得<code>Array</code>的长度</h2><p><strong><code>.length</code></strong> 可以得到并改变数组长度，变长加空数组，变短会使元素丢失</p><p>直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化</p><pre><code>var arr = [1, 2, 3.14, &#39;Hello&#39;, null, true];arr.length; // 6arr.length = 8;//数组越界arr; // arr变为[1, 2, 3.14, &#39;Hello&#39;, null, true， undefined, undefined]arr.length = 2;arr; // arr变为[1, 2]</code></pre><h2 id="2、下标索引赋值"><a href="#2、下标索引赋值" class="headerlink" title="2、下标索引赋值"></a>2、下标索引赋值</h2><p><code>Array</code>可以通过索引把对应的元素<strong>修改</strong>为新的值</p><pre><code>var arr = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];arr[1] = 99;arr; // arr现在变为[&#39;A&#39;, 99, &#39;C&#39;]arr[5] = &#39;x&#39;;arr; // arr变为[&#39;A&#39;, 99, &#39;C&#39;, undefined, undefined, &#39;x&#39;]</code></pre><p><code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置</p><pre><code>arr.indexOf(99); // 元素99的索引为1arr.indexOf(30); // 元素30没有找到，返回-1</code></pre><h2 id="3、截取数组"><a href="#3、截取数组" class="headerlink" title="3、截取数组"></a>3、截取数组</h2><p><code>slice()</code>就是对应 String 的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：</p><h2 id="4、数组增删"><a href="#4、数组增删" class="headerlink" title="4、数组增删"></a>4、数组增删</h2><p><strong><code>.push()</code></strong> 数组尾部增加 ， <strong><code>.pop()</code></strong> 数组尾部弹出一个元素 ; <strong><code>.unshift（）</code></strong> 压入头部 ，**<code>.shift（）</code>** 弹出头部的一个元素。加入循环可以清空一个数组。</p><p><strong><code>splice()</code></strong> 方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 'A', 'B']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pop()返回'B'</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 'A']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 连续pop 3次</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空数组继续pop不会报错，而是返回undefined</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span><span class="token comment" spellcheck="true">//splice</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Microsoft"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Yahoo"</span><span class="token punctuation">,</span> <span class="token string">"AOL"</span><span class="token punctuation">,</span> <span class="token string">"Excite"</span><span class="token punctuation">,</span> <span class="token string">"Oracle"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从索引2开始删除3个元素,然后再添加两个元素:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Facebook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span class="token comment" spellcheck="true">// 只删除,不添加:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Google', 'Facebook']</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Oracle']</span><span class="token comment" spellcheck="true">// 只添加,不删除:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Facebook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[],因为没有删除任何元素</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></code></pre><h2 id="5、数组排序"><a href="#5、数组排序" class="headerlink" title="5、数组排序"></a>5、数组排序</h2><p>它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序，可以在函数里定义排列顺序</p><p><strong><code>.sort()</code></strong> [“c”,”b”,”a”] –&gt; [“a”,”b”,”c”]</p><h2 id="6、反转"><a href="#6、反转" class="headerlink" title="6、反转"></a>6、反转</h2><p><code>reverse()</code>把整个<code>Array</code>的元素给调个个，也就是反转</p><p><strong><code>.reverse()</code></strong> [“a”,”b”,”c”]–&gt;{[“c”,”b”,”a”]</p><h2 id="7、数组拼接"><a href="#7、数组拼接" class="headerlink" title="7、数组拼接"></a>7、数组拼接</h2><p><strong><code>.concat()</code></strong> 直接将其拼入数组尾部，<strong>但不改变原数组</strong>，常用于上拉加载合并数据。</p><pre><code>var arr = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];var added = arr.concat([1, 2, 3]);added; // [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, 1, 2, 3]arr; // [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></pre><h2 id="8、连接符"><a href="#8、连接符" class="headerlink" title="8、连接符"></a>8、连接符</h2><p><strong><code>.join()</code></strong> arr&#x3D;[“a”,”b”,”c”] arr.join(-) –&gt; “a-b-c”</p><pre><code>var arr = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, 1, 2, 3];arr.join(&#39;-&#39;); // &#39;A-B-C-1-2-3&#39;</code></pre><h2 id="9、多维数组"><a href="#9、多维数组" class="headerlink" title="9、多维数组"></a>9、多维数组</h2><p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组</p><pre><code>  arr=[[1,2,a],[3,4,b],[5,6,c]]</code></pre><p>上述<code>Array</code>包含 3 个元素，其中头两个元素本身也是<code>Array</code></p><h2 id="10、数组组判断"><a href="#10、数组组判断" class="headerlink" title="10、数组组判断"></a>10、数组组判断</h2><p>AraysAray 方法返回-一个布尔值，表示参数是否为数组。它可以弥补 typeof 运算符的不足</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"尚学堂"</span>， <span class="token number">100</span>，<span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sxt'</span>， <span class="token string">'baizhan'</span>， <span class="token string">'it'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span> <span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h1 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h1><p>用一个<code>&#123;...&#125;</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开 ; <strong>属性：属性值</strong>，值得注意的是，如果对象里面还有一个对象，那么就形成了链式调用，类似包名</p><pre><code>var person = &#123;    name: &#39;Bob&#39;,    age: 20,    tags: [&#39;js&#39;, &#39;web&#39;, &#39;mobile&#39;],    city: &#39;Beijing&#39;,    hasCar: true,    zipcode: null&#125;;</code></pre><h2 id="1、获取属性"><a href="#1、获取属性" class="headerlink" title="1、获取属性"></a>1、获取属性</h2><p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式 , 也可以用<code>xiaohong[&#39;name&#39;]</code>来访问<code>xiaohong</code>的<code>name</code>属性，不过<code>xiaohong.name</code>的写法更简洁，访问一个不存在的属性会返回<code>undefined</code></p><pre><code>var person = &#123;    name: &#39;Bob&#39;,    age: 20,    tags: [&#39;js&#39;, &#39;web&#39;, &#39;mobile&#39;]&#125;;person.name; // &#39;Bob&#39;person.city; // undefined</code></pre><h2 id="2、属性删减"><a href="#2、属性删减" class="headerlink" title="2、属性删减"></a>2、属性删减</h2><p>由于 JavaScript 的对象是动态类型，你可以自由地给一个对象添加或删除属性</p><pre><code>delete xiaoming.age; // 删除age属性，返回`true`</code></pre><h2 id="3、判断属性值是否存在"><a href="#3、判断属性值是否存在" class="headerlink" title="3、判断属性值是否存在"></a>3、判断属性值是否存在</h2><p>用<code>in</code>操作符：xxx in xxx ，<strong>注意！</strong> 如果<code>in</code>判断一个属性存在，这个属性不一定是<code>person</code>的，它可能是<code>person</code>继承得到的</p><pre><code>&#39;name&#39; in person; // true&#39;grade&#39; in person; // false//注意&#39;toString&#39; in person; // true</code></pre><p>因为<code>toString</code>定义在<code>object</code>对象中，所以<code>person</code>也拥有<code>toString</code>属性</p><p>可以用 <strong><code>hasOwnProperty()</code></strong> 判断属性是否自身拥有</p><pre><code>person.hasOwnProperty(toString)  //返回false</code></pre><h1 id="五、条件判断和循环"><a href="#五、条件判断和循环" class="headerlink" title="五、条件判断和循环"></a>五、条件判断和循环</h1><p>因为和 Java 基本一致就不再赘述，<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023023817686336">详细见</a></p><h2 id="1、Map-和-Set"><a href="#1、Map-和-Set" class="headerlink" title="1、Map 和 Set"></a>1、Map 和 Set</h2><p>JavaScript 的对象有个小问题，就是键必须是字符串。但实际上 Number 或者其他数据类型作为键也是非常合理的。为了解决这个问题，最新的 ES6 规范引入了新的数据类型<code>Map</code></p><h3 id="1-1、Map"><a href="#1-1、Map" class="headerlink" title="1.1、Map"></a>1.1、Map</h3><pre class=" language-JS"><code class="language-JS">    //ES6 Map    //学生的成绩，学生的名字    // var names = ["tom"，"jack"，"haha"];    // var scores = [100,90,80];    var map = new Map([['tom' ,100] ,['jack' , 90],['haha', 80]]);    var name = map. get('tom'); //通过key获得va1ue    map.set('admin' ,123456); //增加修改    map.delete("tom") //删除</code></pre><p>由于一个 key 只能对应一个 value，所以，多次对一个 key 放入 value，后面的值会把前面的值冲掉</p><pre><code>var m = new Map();m.set(&#39;Adam&#39;, 67);m.set(&#39;Adam&#39;, 88);m.get(&#39;Adam&#39;); // 88</code></pre><h3 id="1-2、Set"><a href="#1-2、Set" class="headerlink" title="1.2、Set"></a>1.2、Set</h3><p><code>Set</code>和<code>Map</code>类似，也是一组 key 的集合，但不存储 value，所以 key 不能重复</p><pre class=" language-JS"><code class="language-JS">set.add(2); //添加set.delete(1); //删除console. 1og(set. has(3)); -//是否包含某 个元素//重复元素在`Set`中自动被过滤var s = new Set([1, 2, 3, 3, '3']);s; // Set &#123;1, 2, 3, "3"&#125;</code></pre><h2 id="2、iterator"><a href="#2、iterator" class="headerlink" title="2、iterator"></a>2、iterator</h2><p>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6 标准引入了新的<code>iterable</code>类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>iterable</code>类型。具有<code>iterable</code>类型的集合可以通过新的<code>for ... of</code>循环来遍历。</p><h3 id="2-1、for-…-of-和-for-…-in"><a href="#2-1、for-…-of-和-for-…-in" class="headerlink" title="2.1、for … of 和 for … in"></a>2.1、for … of 和 for … in</h3><p>遍历集合：</p><pre><code>var a = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];var s = new Set([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]);var m = new Map([[1, &#39;x&#39;], [2, &#39;y&#39;], [3, &#39;z&#39;]]);for (var x of a) &#123; // 遍历Array    console.log(x);&#125;for (var x of s) &#123; // 遍历Set    console.log(x);&#125;for (var x of m) &#123; // 遍历Map    console.log(x[0] + &#39;=&#39; + x[1]);&#125;</code></pre><p><code>for ... of</code>循环和<code>for ... in</code>循环的<strong>区别</strong>：<code>for ... in</code>它遍历的实际上是对象的属性名称，<code>for ... of</code>它只循环集合本身的元素</p><pre><code>var a = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];a.name = &#39;Hello&#39;;for (var x in a) &#123;    console.log(x); // &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;name&#39;&#125;</code></pre><h3 id="2-2、forEach"><a href="#2-2、forEach" class="headerlink" title="2.2、forEach"></a>2.2、forEach</h3><p><code>forEach()</code>方法是 ES5.1 标准引入的<br>只需要获得<code>Array</code>的<code>element</code></p><pre class=" language-JS"><code class="language-JS">var a = ['A', 'B', 'C'];a.forEach(function (element) &#123;   console.log(element);&#125;);</code></pre><p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身</p><pre><code>var m = new Map([[1, &#39;x&#39;], [2, &#39;y&#39;], [3, &#39;z&#39;]]);m.forEach(function (value, key, map) &#123;    console.log(value);&#125;);</code></pre><p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身</p><pre><code>var s = new Set([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]);s.forEach(function (element, sameElement, set) &#123;    console.log(element);&#125;);</code></pre><p>set 可以认为是去除了 value 的 map , 他的存储模式是和 map 一样的, 数组+链表 or 红黑树的方式。而 array 是单纯的数组.</p><h1 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h1><p>函数就是最基本的一种代码抽象的方式</p><h2 id="1、函数的定义和调用"><a href="#1、函数的定义和调用" class="headerlink" title="1、函数的定义和调用"></a>1、函数的定义和调用</h2><p>函数提升：可以先调用再定义</p><h3 id="1-1、函数的定义"><a href="#1-1、函数的定义" class="headerlink" title="1.1、函数的定义"></a>1.1、函数的定义</h3><p>定义函数的方式如下：</p><pre><code>//方式一//abs()函数实际上是一个函数对象，而函数名`abs`可以视为指向该函数的变量function abs(x) &#123;    if (x &gt;= 0) &#123;        return x;    &#125; else &#123;        return -x;    &#125;&#125;//方式二//是一个匿名函数，它没有函数名var abs = function (x) &#123;    if (x &gt;= 0) &#123;        return x;    &#125; else &#123;        return -x;    &#125;&#125;;</code></pre><p><code>function</code>指出这是一个函数定义； <code>abs</code>是函数的名称；函数体内部的语句在执行时。一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回；如果没有<code>return</code>语句返回<code>undefined</code></p><p>上述两种定义<strong>完全等价</strong></p><p>调用函数时，按顺序传入参数即可</p><pre><code>abs(10); // 返回10abs(-9); // 返回9abs(); //此时`abs(x)`函数的参数`x`将收到`undefined`， 返回NaN</code></pre><p>通俗点说，函数就是抽象封装的东西，用来提高代码的复用性</p><h3 id="1-2、arguments"><a href="#1-2、arguments" class="headerlink" title="1.2、arguments"></a>1.2、arguments</h3><p>它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。 利用<code>arguments</code>，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值；常用于判断传入参数的个数</p><h3 id="1-3、rest-参数"><a href="#1-3、rest-参数" class="headerlink" title="1.3、rest 参数"></a>1.3、rest 参数</h3><p>以前:</p><pre class=" language-JS"><code class="language-JS">if (arguments.1ength > 2) &#123;    for (var i = 2; i < arguments.length; i++) &#123;        //。。。。    &#125;&#125;</code></pre><p>ES6 引入的新特性，获取除了已经定义的参数之外的所有参数~ …</p><pre class=" language-JS"><code class="language-JS">function aaa(a, b, ...rest) &#123;    console.1og("a=>" + a);    console.1og("b=>" + b);    console.1og(rest);&#125;</code></pre><h2 id="2、变量的作用域"><a href="#2、变量的作用域" class="headerlink" title="2、变量的作用域"></a>2、变量的作用域</h2><p>变量的作用域在 javascript 中，var 定义变量实际是有作用域的。假设在函数体中声明，则在函数体外不可以使用~！（闭包）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">qj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  varX <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  X <span class="token operator">=</span> X <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Uncaught ReferenceError: x is not defined</span></code></pre><p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突;内部函数可以访问外部函数的成员，反之则不行</p><p>假如内部函数变量和外部函数的变量，重名</p><pre class=" language-JS"><code class="language-JS">function qj() &#123;    varx = 1;    function qj2 () &#123;        varx = ' A';        console.1og('inner' + x); // outer1    &#125;    console.1og('outer' + x); //innerA    qj2()&#125;qj()</code></pre><p>假设在 JavaScript 中函数查找变量从自身函数开始~，<strong>由内向外</strong>查找.假设外部存在这个同名<br>的函数变量，则内部函数会屏蔽外部函数的变量。</p><h3 id="2-1、提升变量作用域"><a href="#2-1、提升变量作用域" class="headerlink" title="2.1、提升变量作用域"></a>2.1、提升变量作用域</h3><pre><code>function qj() &#123;    var x = &quot;x”+y;console.1og(x);vary=&#39;y&#39;;&#125;// 结果 x undefined</code></pre><p>说明;<br>js 执行引擎,自动提升了 y 的声明，但是不会提升变量 y 的赋值’;</p><pre class=" language-JS"><code class="language-JS"> function qj2() &#123;var y;varx="x"+y;console.1og(x);y ='y ';&#125;</code></pre><p>这个是在 JavaScript 建立之初就存在的特性。养成规范:所有的变量定义都放在函数的头部，不要乱放,便于代码维护;</p><pre class=" language-JS"><code class="language-JS">function qj2() &#123;   varx = 1,   y = x + 1,   z,i,a; //undefined   //之后随意用&#125;</code></pre><h3 id="2-2、全局函数"><a href="#2-2、全局函数" class="headerlink" title="2.2、全局函数"></a>2.2、全局函数</h3><pre class=" language-JS"><code class="language-JS">//全局变量x = 1;function f() &#123;    console.1og(x);    f();    console.1og(x);</code></pre><h3 id="2-3、全局对象-window"><a href="#2-3、全局对象-window" class="headerlink" title="2.3、全局对象 window"></a>2.3、全局对象 window</h3><pre class=" language-JS"><code class="language-JS">varX一XXX，alert(x);alert(window.x); //默认所有的全局变量，都会自动绑定在window对象下;</code></pre><p>alert()这个函数本身也是一个 window 变量;</p><pre class=" language-JS"><code class="language-JS">varx = ' xXx';window.alert(x);var o1d_ alert = window.alert;//o1d_ alert(x);window.alert = function() &#123;&#125;;//发现alert() 失效了window.alert(123);//恢复window.alert = o1d_ alert;window.alert(456);</code></pre><p>Javascript 实际上只有一个全局作用域，任何变量 (函数也可以视为变量)， 假设没有在函数作用<br>范围内找到，就会向外查找，如果在全局作用域都没有找到，报错<br><code>RefrenceError</code></p><h3 id="2-4、规范"><a href="#2-4、规范" class="headerlink" title="2.4、规范"></a>2.4、规范</h3><p>由于我们所有的全局变量都会绑定到我们的 window.上。如果不同的 js 文件，使用了相同的全局变<br>量，冲突~&gt;如果能够减少冲突?</p><pre class=" language-JS"><code class="language-JS">//唯一全局变量var KuangApp = &#123;&#125;;//定义全局变量KuangApp. name =' kuangshenKuangApp.add = function (a,b) &#123;return a + b;&#125;</code></pre><p>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突的问题~<br>jQuery –&gt; $()</p><h3 id="2-5、局部作用域-let"><a href="#2-5、局部作用域-let" class="headerlink" title="2.5、局部作用域 let"></a>2.5、局部作用域 let</h3><pre class=" language-JS"><code class="language-JS">function aaa() &#123;    for (vari = 0; i < 100; i++) &#123;        console.1og(i) console.1og(i + 1); //问题? i 出了这个作用域还可以使用    &#125;</code></pre><p>解决局部作用域冲突问题，建议用 let 定义局部作用域变量</p><h3 id="2-6、常量-const"><a href="#2-6、常量-const" class="headerlink" title="2.6、常量 const"></a>2.6、常量 const</h3><p>在 ES6 之前建议使用大写字母来定义的变量作为常量，建议不要修改，ES6 之后引入了常量关键字<code>const</code></p><pre class=" language-JS"><code class="language-JS">const PI = '3.14'; //只读变量console.1og(PI);PI = ' 123'; // TypeError: Assi gnment to constant variable.console.1og(PI);</code></pre><h2 id="3、方法"><a href="#3、方法" class="headerlink" title="3、方法"></a>3、方法</h2><p>把函数放在对象里面，只有属性和方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> kuangshen <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token string">'秦 疆'</span>bitrh<span class="token punctuation">:</span> <span class="token number">2000</span>，    <span class="token comment" spellcheck="true">// 方法</span>    age<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//今年一出生的年</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFu11Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitrh<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//属性</span>    kuangshen<span class="token punctuation">.</span>name    <span class="token comment" spellcheck="true">//方法,一定要带()</span>    kuangshen<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>this 代表什么？拆开代码看看</p><pre class=" language-JS"><code class="language-JS">function getAge() &#123;    //今年-出生的年    var now = new Date().getFul1Year();    return now - this.bitrh;&#125;var kuangshen = &#123;    name: '秦疆'，bitrh: 2000，age: getAge    // kuangshen.age() ok    // getAge()  NaN  window</code></pre><p>可以看出调用<code>getAge()</code>方法失败，因为 window 里没有<code>this.birth</code>所以调用失败</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>在 js 中可以控制 this 的指向</p><pre class=" language-JS"><code class="language-JS">function getAge() &#123;    //今年-出生的年    var now = new Date().getFullYear();    return now - this.bitrh;&#125;var kuangshen = &#123;    name: '秦疆'，bitrh: 2000,    age: getAge&#125;;// kuangshen.age() okgetAge.app1y(kuangshen, []); // this， 指向了kuangshen这个对象， 参数为空</code></pre><p><code>apply</code>可以让方法里的 this 指向某个对象，获取改对象的属性和属性值，即调用可以成功</p><h1 id="七、简单对象"><a href="#七、简单对象" class="headerlink" title="七、简单对象"></a>七、简单对象</h1><h2 id="1、Date"><a href="#1、Date" class="headerlink" title="1、Date"></a>1、Date</h2><p>JavaScript 的 Date 对象月份值从 0 开始，牢记 0&#x3D;1 月，1&#x3D;2 月，2&#x3D;3 月，……，11&#x3D;12 月。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span> <span class="token operator">/</span>Sat Jan <span class="token number">04</span> <span class="token number">2020</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token operator">/</span> <span class="token punctuation">:</span><span class="token number">06</span> GMT<span class="token operator">+</span><span class="token number">0800</span> <span class="token punctuation">(</span> 中国标准时间<span class="token punctuation">)</span>now<span class="token punctuation">.</span> <span class="token function">getFul1year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//年</span>now<span class="token punctuation">.</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//月  0~11 代表月</span>now<span class="token punctuation">.</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//日</span>now<span class="token punctuation">.</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//星期几</span>now<span class="token punctuation">.</span> <span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时</span>now<span class="token punctuation">.</span> <span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分</span>now<span class="token punctuation">.</span> <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//秒</span>now<span class="token punctuation">.</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//时间戳全世界统-一1970 1.1 0:00:00毫秒数</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1435146562875</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Wed Jun 24 2015 19:49:22 GMT+0800 (CST)//时间戳转 为时间</span>d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>now<span class="token punctuation">.</span><span class="token function">toLocalestring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获得本地时间</span>now<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获得GMT时间</span></code></pre><p>如果要创建一个指定日期和时间的<code>Date</code>对象，可以用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 年,月,日,时,分,秒,毫秒</span></code></pre><h2 id="2、JSON"><a href="#2、JSON" class="headerlink" title="2、JSON"></a>2、JSON</h2><p>JSON 是超轻量级的数据交换格式，能有效的提升网络传输效率</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"qinjiang"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象转化为json字符串&amp;#123;"name" : "qinjiang"，"age":3, "sex":"男"&amp;#125;</span><span class="token keyword">var</span> jsonUser <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//json字符串转化为对象参数为json字符串</span><span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&amp;#123;"name":"qinjiang", "age":3,"sex":"男"&amp;#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3、Math"><a href="#3、Math" class="headerlink" title="3、Math"></a>3、<code>Math</code></h2><h3 id="3-1、Math-abs-返回参数值的绝对值"><a href="#3-1、Math-abs-返回参数值的绝对值" class="headerlink" title="3.1、Math.abs()返回参数值的绝对值"></a>3.1、Math.abs()返回参数值的绝对值</h3><pre class=" language-js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span></code></pre><h3 id="3-2、Math-max-Math-min"><a href="#3-2、Math-max-Math-min" class="headerlink" title="3.2、Math.max(), Math.min()"></a>3.2、Math.max(), Math.min()</h3><p>Math.max 方法返回参数之中最大的那个值，Math.min 返回最小的那个值。如果参数为空，Math.min 返回 Infinity，Math.max 返回-Infinity。</p><pre class=" language-JS"><code class="language-JS">Math. max(2, -1，5) // 5Math.min(2, -1，5) // -1Math.min() // InfinityMath.max() // -Infinity</code></pre><h3 id="3-3、Math-random"><a href="#3-3、Math-random" class="headerlink" title="3.3、Math.random()"></a>3.3、Math.random()</h3><p>Math.random()返回 0 到 1 之间的-一个伪随机数，可能等于 0,但是-定小于 1</p><pre class=" language-js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0.28525367438365223</span></code></pre><p>任意范围(main——max)的随机数生成函数如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRandomArbitrary</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">getRandomArbitrary</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-4、Math-floor-Math-ceil"><a href="#3-4、Math-floor-Math-ceil" class="headerlink" title="3.4、Math.floor(), Math.ceil()"></a>3.4、Math.floor(), Math.ceil()</h3><p>Math.loor 方法返回小于参数值的最大整数</p><pre class=" language-js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">f1oor</span><span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>Math<span class="token punctuation">.</span><span class="token function">f1oor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -4</span></code></pre><p>Math.ceil 方法返回大于参数值的最小整数</p><pre class=" language-js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">cei1</span><span class="token punctuation">(</span><span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -3</span></code></pre><h1 id="七、面向对象"><a href="#七、面向对象" class="headerlink" title="七、面向对象"></a>七、面向对象</h1><h2 id="1、原型继承"><a href="#1、原型继承" class="headerlink" title="1、原型继承"></a>1、原型继承</h2><p>通过<code>.__proto__</code>继承后，被继承的对象类似于父类</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"qinjiang"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> run<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" run...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//xiaoming里没有age属性，没有run方法</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//xiaoming相当于继承了对象student，会run有年龄有名字</span>xiaoming<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> student<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果再次继承则会覆盖，以最后的一次继承的对象为父类</span><span class="token keyword">var</span> Bird <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fly<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"fl...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小明的原型是student，现在xiaoming只会fly和有名字</span>xiaoming<span class="token punctuation">.</span>_ proto__ <span class="token operator">=</span> Bird<span class="token punctuation">;</span></code></pre><h2 id="2、class-继承"><a href="#2、class-继承" class="headerlink" title="2、class 继承"></a>2、class 继承</h2><p><code>class</code>和 Java 是面向对象非常相似,<code>extends</code>继承也和 Java 很像</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义一个学生的类</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//构造器</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//都是无返回值的方法</span>  <span class="token function">he11o</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"he11o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> xiaohong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"xiaohong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承后super调用</span><span class="token keyword">class</span> <span class="token class-name">xiaostudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> grade<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//自己的方法</span>  <span class="token function">myGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是一名小学生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> xiao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xiaostudent</span><span class="token punctuation">(</span><span class="token string">"xiaostudent"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们打印<code>xiao</code>可以发现<code>xiaostudent</code>的原型是<code>Student</code>，而<code>Student</code>的原型是<code>Object</code>，那<code>Object</code>的原型是谁？我们把这种链状关系叫原型链<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a10a3a29cf1842f3b9b6ea24bd543066~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><a href="https://juejin.cn/post/6934498361475072014">深入原型链</a></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82fa92c22714407f90e96d1846e7a3ab~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="八、浏览器"><a href="#八、浏览器" class="headerlink" title="八、浏览器"></a>八、浏览器</h1><h2 id="1、操作-BOM-对象"><a href="#1、操作-BOM-对象" class="headerlink" title="1、操作 BOM 对象"></a>1、操作 BOM 对象</h2><p>BOM 就是浏览器模型</p><ul><li>Window：浏览器窗口</li></ul><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>undefinedwindow<span class="token punctuation">.</span>innerHeight<span class="token number">258</span>wi ndow<span class="token punctuation">.</span>innerwidth<span class="token number">919</span>window<span class="token punctuation">.</span>outerHeight<span class="token number">994</span>wi n dow<span class="token punctuation">.</span>outerWidth<span class="token number">919</span><span class="token comment" spellcheck="true">//还有很多，可以自己再浏览器尝试</span></code></pre><ul><li>Navigater：封装了浏览器信息，但不建议使用</li><li>Screen：屏幕尺寸</li></ul><pre class=" language-js"><code class="language-js">screen<span class="token punctuation">.</span>width<span class="token number">1920</span> pxscreen<span class="token punctuation">.</span>height<span class="token number">1080</span> px</code></pre><ul><li>location：当前页面 url 信息<ul><li>host：主机</li><li>href：当前指向位置</li><li>protocol：协议</li><li>reload：方法； f reloadl:刷新</li><li>location:assign(‘url’)：设置新地址</li></ul></li></ul><pre class=" language-js"><code class="language-js">host<span class="token punctuation">:</span> "www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>comhref<span class="token punctuation">:</span> <span class="token string">"https://www.baidu.com/"</span>protoco1<span class="token punctuation">:</span> <span class="token string">"https:"</span>reload<span class="token punctuation">:</span> f <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 刷新网页</span><span class="token comment" spellcheck="true">//设置新的地址</span>location<span class="token punctuation">.</span>assi <span class="token function">gn</span><span class="token punctuation">(</span><span class="token string">'https://b7og.kuangstudy.com/'</span><span class="token punctuation">)</span></code></pre><ul><li><p>document：代表当前页面；HTML DOM 文档树，可以获取，删除，增加文档树节点，还可以获取 cookie 等,后面细讲</p></li><li><p>history：浏览器历史记录,不建议使用</p></li></ul><pre class=" language-js"><code class="language-js">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后退</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前进</span></code></pre><h2 id="2、操作-DOM"><a href="#2、操作-DOM" class="headerlink" title="2、操作 DOM"></a>2、操作 DOM</h2><p>DOM 是 JavaScript<strong>操作网页的接口</strong>，全称为”文档对象模型”(Document Object Model)。它的作用是将网<br>页转为一个 JavaScript 对象，从而可以用脚本进行各种操作(比如对元素增删内容)</p><p>浏览器会根据 DOM 模型，将结构化文档 HTML 解析成一系列的节点， 再由这些节点组成一个树状结构(DOM<br>Tree)。<strong>所有的</strong> <strong>节点和最终的树状结构，都有规范的对外接口</strong></p><p>浏览器网页就是 DOM 树结构</p><ul><li>更新:更新 Dom 节点</li><li>遍历 dom 节点:得到 Dom 节点</li><li>删除:删除一个 Dom 节点</li><li>添加:添加一个新的节点</li></ul><h3 id="2-1、获得节点"><a href="#2-1、获得节点" class="headerlink" title="2.1、获得节点"></a>2.1、获得节点</h3><p>DOM 的最小组成单位叫做节点(node) 。文档的树形结构(DOM 树)，就是由各种不同类型的节点组成。<br>每个节点可以看作是文档树的一片叶子</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3bd59d53c8c4393a25a76f358e124fa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>节点类型</strong></p><ul><li>Document: 整个文档树的顶层节点</li><li>DocumentType: doctype 标签</li><li>Element: 网页的各种 HTML 标签</li><li>Attribute: 网页元素的属性(比如 class&#x3D;”right”)</li><li>Text: 标签之间或标签包含的文本</li><li>Comment: 注释</li><li>DocumentFragment:文档的片段（不常用）</li></ul><p>要操作一个 Dom 节点，就必须要先获得这个 Dom 节点，获取方式对应 css 选择器，比如标签选择器、<code>id</code>、<code>class</code>等</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="2-1-1、标签获取"><a href="#2-1-1、标签获取" class="headerlink" title="2.1.1、标签获取"></a>2.1.1、标签获取</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//如果有多个相应标签可以在后面通过添加[]来选取对应的标签</span><span class="token keyword">var</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>document.getElementsByTagName 方法搜索 HTML 标签名,返回符合条件的元素。它的返回值是一个类似数组对象<br>( HTMColelon 实例)，可以实时反映 HTML 文档的变化。如果没有任何匹配的元素，就返回一个空集</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> paras <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果传入。，就可以返回文档中所有 HTML 元素</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a11Elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-1-2、类获取"><a href="#2-1-2、类获取" class="headerlink" title="2.1.2、类获取"></a>2.1.2、类获取</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-1-3、id-获取"><a href="#2-1-3、id-获取" class="headerlink" title="2.1.3、id 获取"></a>2.1.3、id 获取</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> p1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-1-4、name-获取"><a href="#2-1-4、name-获取" class="headerlink" title="2.1.4、name 获取"></a>2.1.4、name 获取</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用率低</span><span class="token keyword">var</span> h1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-1-5、关系获取"><a href="#2-1-5、关系获取" class="headerlink" title="2.1.5、关系获取"></a>2.1.5、关系获取</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> childrens <span class="token operator">=</span> father<span class="token punctuation">.</span>children<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取父节点下的所有子节点</span>father<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子节点的第一个节点</span>father<span class="token punctuation">.</span>LastChild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子节点的最后一个节点</span>father<span class="token punctuation">.</span>Next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子节点的下一个节点</span></code></pre><h4 id="2-1-6、document-querySelector"><a href="#2-1-6、document-querySelector" class="headerlink" title="2.1.6、document.querySelector()"></a>2.1.6、document.querySelector()</h4><p>document.uerSelecor 方法接受一个 CSS 选择器作为参数,返回匹配该选择器的元素节点。如果有多个节点满足<br>匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回 null</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> e11 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".myclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-1-7、document-querySelectorAll"><a href="#2-1-7、document-querySelectorAll" class="headerlink" title="2.1.7、document.querySelectorAll()"></a>2.1.7、document.querySelectorAll()</h4><p>document. qesSelectoll 方法与 queysSelector 用法类似，区别是返回一个 NodeList 对象，包含所有匹配给定选择器的<br>节点</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> elementList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">queryselectorA11</span><span class="token punctuation">(</span><span class="token string">" .myclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上都是原生代码，后面推荐使用 jQuery</p><h3 id="2-2、更新节点"><a href="#2-2、更新节点" class="headerlink" title="2.2、更新节点"></a>2.2、更新节点</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//id1 是获取的到的节点</span>id1<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文本的值</span>id1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;strong> 123&lt;/strong>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以解析HTML文本标签</span>id1<span class="token punctuation">.</span>sty1e<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"yel1ow"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//属性使用字符串包裹</span>id1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">" 20px"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一转驼峰命名问题</span>id1<span class="token punctuation">.</span>sty1e<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">"2em"</span><span class="token punctuation">;</span></code></pre><h3 id="2-3、删除节点"><a href="#2-3、删除节点" class="headerlink" title="2.3、删除节点"></a>2.3、删除节点</h3><p>要通过父节点获取子节点来删除子节点</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题一-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> se1f <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> father <span class="token operator">=</span> p1<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>    father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>sejf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//动态过程，主要索引的下标变化</span>    father<span class="token punctuation">.</span>removeChi <span class="token number">1</span><span class="token function">d</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>chi1dren <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    father<span class="token punctuation">.</span>removeChi <span class="token number">1</span><span class="token function">d</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>chi1dren <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>注意:删除多个节点的时候，children 是在时刻变化的,</p><h3 id="2-4、插入节点"><a href="#2-4、插入节点" class="headerlink" title="2.4、插入节点"></a>2.4、插入节点</h3><pre class=" language-js"><code class="language-js">  <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"js"</span><span class="token operator">></span> Javascript<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"se"</span><span class="token operator">></span>JavaSE<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>   <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"ee"</span><span class="token operator">></span>JavaEE<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>   <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"me"</span><span class="token operator">></span>JavaME<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> 1ist <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>1ist<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//追加到后面</span><span class="token comment" spellcheck="true">//通过JS创建一个新的节点</span><span class="token comment" spellcheck="true">//例如： &lt;p id="root">我是文本&lt;/p></span><span class="token comment" spellcheck="true">//方法一</span><span class="token keyword">var</span> newP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个p标签</span>newP<span class="token punctuation">.</span>id <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>newP<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'我是文本'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置标签内容</span><span class="token comment" spellcheck="true">//方法二</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个p标签</span><span class="token keyword">var</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"我是文本"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建文本</span><span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建id属性</span>id<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"root"</span><span class="token comment" spellcheck="true">//id值</span>  <span class="token comment" spellcheck="true">//appendChild: 将内容或者子元素放到容器中，也即是追加</span>text<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>text<span class="token punctuation">.</span><span class="token function">setAttributeNode</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如何渲染到页面呢？——> 对页面上的某标签里使用appendChild追加到里面即可</span><span class="token comment" spellcheck="true">//创建一一个标签节点.</span><span class="token comment" spellcheck="true">// 例如： &lt;script type="text/javascript">&lt;/script></span><span class="token keyword">var</span> myScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>myScript<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span>，<span class="token string">'text/javascript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5、Element-属性"><a href="#2-5、Element-属性" class="headerlink" title="2.5、Element 属性"></a>2.5、Element 属性</h3><p>Element 对象对应网页的 HTML 元素。每一个 HTML 元素，在 DOM 树上都会转化成一个 Element 节点对象(以下简称元素节点)</p><h4 id="2-5-1、Element-id"><a href="#2-5-1、Element-id" class="headerlink" title="2.5.1、Element.id"></a>2.5.1、Element.id</h4><p><code>Elementid</code>属性返回指定元素的 id 属性，该属性可读写</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// HTML代码为&lt;p id="foo"></span><span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//'foo'</span></code></pre><h4 id="2-5-2、Element-className"><a href="#2-5-2、Element-className" class="headerlink" title="2.5.2、Element.className"></a>2.5.2、Element.className</h4><p><code>className</code>属性用来读写当前元素节点的 class 属性。它的值是一个字符串，每个 class 之间用空格分割</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// HTML代码&lt;div class="one two three" id="myDiv">&lt;/div></span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span> <span class="token function">getElementById</span><span class="token punctuation">(</span> myDiv'<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>c1assName</code></pre><h4 id="2-5-3、Element-classList"><a href="#2-5-3、Element-classList" class="headerlink" title="2.5.3、Element.classList"></a>2.5.3、Element.classList</h4><p><code>classList</code>对象有下列方法</p><ul><li>add():增加一个 class。</li><li>remove():移除一个 class。</li><li>contains() :检查当前元素是否包含某个 class。</li><li>toggle():将某个 class 移入或移出当前元素。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myDiv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'myCssClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'foo'</span>，<span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'myCssClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'myCssClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果myCssClass不存在就加入，否则移除</span>div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'myCssClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回true或者false</span></code></pre><h4 id="2-5-4、Element-innerHTML"><a href="#2-5-4、Element-innerHTML" class="headerlink" title="2.5.4、Element.innerHTML"></a>2.5.4、Element.innerHTML</h4><p><code>ElementinerHTML</code>属性返回一个字符串，等同于该元素包含的所有 HTML 代码。该属性可读写，常用来设置某个节点的内容。它能改写所有元素节点的内容，包括<code>&lt;HTML&gt;</code> 和<code>&lt;body&gt;</code>元素</p><pre class=" language-js"><code class="language-js">e1<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></code></pre><h4 id="2-5-5、Element-innerText"><a href="#2-5-5、Element-innerText" class="headerlink" title="2.5.5、Element.innerText"></a>2.5.5、Element.innerText</h4><p><code>innerText</code>和<code>nnerHTML</code> 类似,不同的是<code>innerText</code>无法识别元素,会直接渲染成字符串</p><h3 id="2-6、Element-获取元素位置"><a href="#2-6、Element-获取元素位置" class="headerlink" title="2.6、Element 获取元素位置"></a>2.6、Element 获取元素位置</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>clientHeight</td><td>获取元素高度包括 padding 部分，但是不包括 border、margin</td></tr><tr><td>document.documentElement.clientHeight</td><td>获取视口高度(屏幕高度)</td></tr><tr><td>doucument.body.clientHeight</td><td>获取页面的高度</td></tr><tr><td>clientWidth</td><td>获取元素宽度包括 padding 部分，但是不包括 border、margin</td></tr><tr><td>scrollHeight</td><td>元素总高度,它包括 padding ,但是不包括 border、margin 包括溢出的不可见内容</td></tr><tr><td>scrollWidth</td><td>元素总宽度，它包括 padding，但是不包括 border、margin 包括溢出的不可见内容</td></tr><tr><td>scrollLeft</td><td>元素的水平滚动条向右滚动的像素数量</td></tr><tr><td>scrollTop</td><td>元素的垂直滚动条向下滚动的像素数量</td></tr><tr><td>offsetHeight</td><td>元素的 CSS 垂直高度(单位像素)，包括元素本身的高度、padding 和 border</td></tr><tr><td>offsetWidth</td><td>元素的 CSS 水平宽度(单位像素)，包括元素本身的高度、 padding 和 border</td></tr><tr><td>offsetLeft</td><td>到定位父级左边界的间距</td></tr><tr><td>offsetTop</td><td>到定位父级上边界的间距</td></tr></tbody></table><h2 id="3、操作-CSS-样式"><a href="#3、操作-CSS-样式" class="headerlink" title="3、操作 CSS 样式"></a>3、操作 CSS 样式</h2><h3 id="3-1、HTML-元素的-style-属性"><a href="#3-1、HTML-元素的-style-属性" class="headerlink" title="3.1、HTML 元素的 style 属性"></a>3.1、HTML 元素的 style 属性</h3><p>操作 CSS 样式最简单的方法，就是使用网页元素节点的 setAtribute 方法直接操作网页元素的 style 属性</p><pre class=" language-js"><code class="language-js">div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span> <span class="token string">'style'</span>，<span class="token comment" spellcheck="true">//参数一</span><span class="token string">' background-color:red;'</span> <span class="token operator">+</span> <span class="token string">'border:1px solid black;'</span><span class="token comment" spellcheck="true">//参数二</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2、元素节点的-style-属性"><a href="#3-2、元素节点的-style-属性" class="headerlink" title="3.2、元素节点的 style 属性"></a>3.2、元素节点的 style 属性</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> divstyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">;</span>divsty1e<span class="token punctuation">.</span>backgroundcolor <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>divStyle<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">"1px solid black"</span><span class="token punctuation">;</span>divStyle<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">" 100px"</span><span class="token punctuation">;</span>divStyle<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">" 100px"</span><span class="token punctuation">;</span>divStyle<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">" 10em"</span><span class="token punctuation">;</span></code></pre><h3 id="3-3、cssText-属性"><a href="#3-3、cssText-属性" class="headerlink" title="3.3、cssText 属性"></a>3.3、cssText 属性</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> divstyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">;</span>divSty1e<span class="token punctuation">.</span>cssText <span class="token operator">=</span>  <span class="token string">" background-co1or: red;"</span> <span class="token operator">+</span>  <span class="token string">"border: 1px solid black;"</span> <span class="token operator">+</span>  <span class="token string">"height: 100px;"</span> <span class="token operator">+</span>  <span class="token string">"width: 100px;"</span><span class="token punctuation">;</span></code></pre><h2 id="4、事件处理"><a href="#4、事件处理" class="headerlink" title="4、事件处理"></a>4、事件处理</h2><p>事件处理程序分为:</p><ul><li>HTML 事件处理</li><li>DOMO 级事件处理</li><li>DOM2 级事件处理</li></ul><h3 id="4-1、HTML-事件处理"><a href="#4-1、HTML-事件处理" class="headerlink" title="4.1、HTML 事件处理"></a>4.1、HTML 事件处理</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ebb4ad072de4845b971fac1b87eb149~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>HTML 事件:缺点: HTML 和 JS 没有分开</p><h3 id="4-2、DOMO-级事件处理"><a href="#4-2、DOMO-级事件处理" class="headerlink" title="4.2、DOMO 级事件处理"></a>4.2、DOMO 级事件处理</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef1eb97f57847cb981e6909f3beab6c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>DOM0 事件:优点: HTML 和 IS 是分离的</p><p>缺点:无法同时添加多个事件</p><h3 id="4-3、DOM2-级事件处理"><a href="#4-3、DOM2-级事件处理" class="headerlink" title="4.3、DOM2 级事件处理"></a>4.3、DOM2 级事件处理</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0d5a52dfb4943b280bded85124608b8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>DOM2 事件:优点:事件不会被覆盖</p><p>缺点:写起来麻烦</p><h2 id="5、鼠标事件"><a href="#5、鼠标事件" class="headerlink" title="5、鼠标事件"></a>5、鼠标事件</h2><p>鼠标事件指与鼠标相关的事件，具体的事件主要有以下一些</p><table><thead><tr><th>事件</th><th>说明</th></tr></thead><tbody><tr><td>click</td><td>按下鼠标时触发</td></tr><tr><td>dblclick</td><td>在同一个元素上双击鼠标时触发</td></tr><tr><td>mousedown</td><td>按下鼠标键时触发</td></tr><tr><td>mouseup</td><td>释放按下的鼠标键时触发</td></tr><tr><td>mousemove</td><td>当鼠标在节点内部移动时触发。当鼠标持续移动时，该事件会连触发。</td></tr><tr><td>mouseenter</td><td>鼠标进入一个节点时触发，进入子节点不会触发这个事件</td></tr><tr><td>mouseleave</td><td>鼠标离开一个节点时触发,离开父节点不会触发这个事件</td></tr><tr><td>mouseover</td><td>鼠标进入-个节点时触发,进入子节点会再一次触发这个事件</td></tr><tr><td>mouseout</td><td>鼠标离开一个节点时触发,离开父节点也会触发这个事件</td></tr><tr><td>wheel</td><td>滚动鼠标的滚轮时触发</td></tr></tbody></table><h2 id="6、Event-事件"><a href="#6、Event-事件" class="headerlink" title="6、Event 事件"></a>6、Event 事件</h2><p>事件发生以后，会产生一个事件对象,作为参数传给监听函数</p><p>Event 对象属性</p><ul><li>Event.Target</li><li>Event.type</li></ul><h3 id="6-1、Event-target"><a href="#6-1、Event-target" class="headerlink" title="6.1、Event.target"></a>6.1、Event.target</h3><p><code>Event.target</code>属性返回事件当前所在的节点(点击谁就返回)</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// HTML代码为</span><span class="token comment" spellcheck="true">// &lt;p id="para">Hello&lt;/p></span><span class="token keyword">function</span> <span class="token function">setCo1or</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>para<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> setCo1or<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-2、Event-type"><a href="#6-2、Event-type" class="headerlink" title="6.2、Event.type"></a>6.2、Event.type</h3><p><code>Event.type</code>属性返回一一个字符串,表示事件类型。事件的类型是在生成事件的时候。该属性只读</p><h2 id="7、Event-对象万法"><a href="#7、Event-对象万法" class="headerlink" title="7、Event 对象万法"></a>7、Event 对象万法</h2><ul><li>Event.preventDefault()</li><li>Event.stopPropagation()</li></ul><h3 id="7-1、Event-preventDefault"><a href="#7-1、Event-preventDefault" class="headerlink" title="7.1、Event.preventDefault"></a>7.1、Event.preventDefault</h3><p><code>Event.preventDefault</code>方法取消浏览器对当前事件的默认行为。比如点击链接后,浏览器默认会跳转到另一个页面，使用这个方法以后，就不会跳转了</p><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span> onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//阻止默认事件</span>  console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">"点击A标签"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="7-2、Event-stopPropagation"><a href="#7-2、Event-stopPropagation" class="headerlink" title="7.2、Event.stopPropagation()"></a>7.2、Event.stopPropagation()</h3><p><code>stopPropagation</code>方法阻止事件在 DOM 中继续传播,防止再触发定义在别的节点上的监听函数, 但是不包括在当前节点上其他的事件监听函数</p><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span> onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> e<span class="token punctuation">.</span> <span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 阻止事件冒泡</span> console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>简单点说，<strong>事件冒泡</strong>就是事件从子级传递到了父级；也就是子级事件发生了，父级就算没有该事件但是也会发生（父子之间相互嵌套）</p><h2 id="8、键盘事件"><a href="#8、键盘事件" class="headerlink" title="8、键盘事件"></a>8、键盘事件</h2><p>键盘事件由用户击打键盘触发，主要有<code>keydown</code> ,<code>keypress</code> ,<code>keyup</code>三个事件</p><ul><li>keydown:按下键盘时触发。</li><li>keypress: 按下有值的键时触发，即按下 Ctrl. Alt、 Shift、 Meta 这样无值的键，这个事件不会触发。对于有值的键， 按下时先触发 keydown 事件，再触发这个事件。</li><li>keyup:松开键盘时触发该事件</li></ul><h3 id="8-1、keydown"><a href="#8-1、keydown" class="headerlink" title="8.1、keydown"></a>8.1、keydown</h3><pre class=" language-js"><code class="language-js">username<span class="token punctuation">.</span>onkeypress <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span> <span class="token number">1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">"keypress事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span> <span class="token operator">/</span>也可以获取到该元素的值console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="8-2、keyCode-唯一标识"><a href="#8-2、keyCode-唯一标识" class="headerlink" title="8.2、keyCode;唯一标识"></a>8.2、keyCode;唯一标识</h3><p>每个键盘案件都有唯一标识用<code>e.keyCode</code>获取</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span>getElementById<span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> username <span class="token punctuation">.</span> onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span> keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">"回车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="9、表单事件"><a href="#9、表单事件" class="headerlink" title="9、表单事件"></a>9、表单事件</h2><p>表单事件是在使用表单元素及输入框元素可以监听的一系列事件</p><ul><li>input 事件</li><li>select 事件</li><li>Change 事件</li><li>reset 事件</li><li>submit 事件</li></ul><h3 id="9-1、input-事件"><a href="#9-1、input-事件" class="headerlink" title="9.1、input 事件"></a>9.1、input 事件</h3><p>input 事件当<code>&lt;input&gt;</code>.<code> &lt;select&gt;</code>. <code>&lt;textarea&gt;</code> 的值发生变化时触发。对于复选框( <code>&lt;input type=checkbox&gt; </code>)或单选框( <code>&lt;input type=radio&gt;</code>)，用户改变选项时，也会触发这个事件</p><p>input 事件的一个特点，就是会连续触发，比如用户每按下一次按键， 就会触发一次 input 事件。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>username<span class="token punctuation">.</span>oninput <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取数据</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="9-2、select-事件"><a href="#9-2、select-事件" class="headerlink" title="9.2、select 事件"></a>9.2、select 事件</h3><p>select 事件当在<code>&lt;input.textarea&gt; </code>里面选中文本时触发</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// HTML代码如下</span> <span class="token comment" spellcheck="true">// &lt;input id="test" type="text" value="Select me!" /></span> <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span> <span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> elem<span class="token punctuation">.</span> addEventL <span class="token function">istener</span><span class="token punctuation">(</span><span class="token string">'select'</span>， <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "select"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>，<span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="9-3、Change-事件"><a href="#9-3、Change-事件" class="headerlink" title="9.3、Change 事件"></a>9.3、Change 事件</h3><p><code>Change</code>事件当<code>&lt;input&gt;</code>.<code> &lt;select&gt;</code>. <code>&lt;textarea&gt;</code>的值发生变化时触发。它与 input 事件的最大不同，就是不会连续触发，只有当全部修改完成时才会触发</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> email <span class="token operator">=</span> document <span class="token punctuation">.</span> <span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> email <span class="token punctuation">.</span> onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span> target<span class="token punctuation">.</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="9-4、reset-事件-submit-事件"><a href="#9-4、reset-事件-submit-事件" class="headerlink" title="9.4、reset 事件, submit 事件"></a>9.4、reset 事件, submit 事件</h3><p>这两个事件发生在表单对象<code>&lt;form&gt;</code>上，而不是发生在表单的成员上。</p><ul><li>reset 事件当表单重置(所有表单成员变回默认值)时触发。</li><li>submit 事件当表单数据向服务器提交时触发。注意, submit 事件的发生对象是<code>&lt;orm&gt;</code>元素,而不是<code>&lt;button&gt;</code>元素，因为提交的是表单，而不是按钮</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"myForm"</span> onsubmi t<span class="token operator">=</span><span class="token string">"submi tHand1e"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>button oncli ck<span class="token operator">=</span><span class="token string">"resetHandle"</span><span class="token operator">></span>重置数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>button<span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span> <span class="token keyword">var</span> myForm <span class="token operator">=</span> document<span class="token punctuation">.</span> getE1 <span class="token function">ementById</span><span class="token punctuation">(</span><span class="token string">"myForm"</span><span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">resetHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    myForm<span class="token punctuation">.</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">function</span> submi <span class="token function">tHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">"提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="10、操作表单"><a href="#10、操作表单" class="headerlink" title="10、操作表单"></a>10、操作表单</h2><p>操作表单就是 form DOM 树，他有</p><ul><li>文本框，对应的<code>&lt;input type=&quot;text&quot;&gt;</code>，用于输入文本；</li><li>口令框，对应的<code>&lt;input type=&quot;password&quot;&gt;</code>，用于输入口令；</li><li>单选框，对应的<code>&lt;input type=&quot;radio&quot;&gt;</code>，用于选择一项；</li><li>复选框，对应的<code>&lt;input type=&quot;checkbox&quot;&gt;</code>，用于选择多项；</li><li>下拉框，对应的<code>&lt;select&gt;</code>，用于选择一项；</li><li>隐藏文本，对应的<code>&lt;input type=&quot;hidden&quot;&gt;</code>，用户不可见，但表单提交时会把隐藏文本发送到服务器。</li></ul><h3 id="10-1、获得表单信息"><a href="#10-1、获得表单信息" class="headerlink" title="10.1、获得表单信息"></a>10.1、获得表单信息</h3><p>如果我们获得了一个<code>&lt;input&gt;</code>节点的引用，就可以直接调用<code>value</code>获得对应的用户输入值，并且还适用于<code>text</code>、<code>password</code>、<code>hidden</code>以及<code>select</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// &lt;input type="text" id="email"></span><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '用户输入的值'</span></code></pre><p>也可以自己设置值</p><pre><code>input.value = &#39;test@example.com&#39;; // 文本框的内容已更新</code></pre><p>对于单选框和复选框，<code>value</code>属性返回的永远是 HTML 预设的值，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用<code>checked</code>判断：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// &lt;label>&lt;input type="radio" name="weekday" id="monday" value="1"> Monday&lt;/label></span><span class="token comment" spellcheck="true">// &lt;label>&lt;input type="radio" name="weekday" id="tuesday" value="2"> Tuesday&lt;/label></span><span class="token keyword">var</span> mon <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"monday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tue <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tuesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mon<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '1'</span>tue<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '2'</span>mon<span class="token punctuation">.</span>checked<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true或者false</span>tue<span class="token punctuation">.</span>checked<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true或者false</span></code></pre><h3 id="10-2、提交表单"><a href="#10-2、提交表单" class="headerlink" title="10.2、提交表单"></a>10.2、提交表单</h3><p>浏览器默认点击<code>&lt;button type=&quot;submit&quot;&gt;</code>时提交表单，或者用户在最后一个输入框按回车键。因此，可以在提交 form 时作修改：</p><pre><code>&lt;!-- HTML --&gt;&lt;form id=&quot;test-form&quot; onsubmit=&quot;return checkForm()&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;test&quot;&gt;    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;script&gt;function checkForm() &#123;    var form = document.getElementById(&#39;test-form&#39;);    // 可以在此修改form的input...    // 继续下一步:    return true; //告诉浏览器继续提交&#125;&lt;/script&gt;</code></pre><p>可以利用<code>&lt;input type=&quot;hidden&quot;&gt;</code>实现提交表单时不传输明文口令</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- HTML --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return checkForm()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--用户名--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!--用户输入的密码，因为没有name使用密码不会被提交--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>md5-password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">checkForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> input_pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input-password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> md5_pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"md5-password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把用户输入的明文变为MD5:</span>    md5_pwd<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">toMD5</span><span class="token punctuation">(</span>input_pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 继续下一步:</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="11、事件代理（事件委托）"><a href="#11、事件代理（事件委托）" class="headerlink" title="11、事件代理（事件委托）"></a>11、事件代理（事件委托）</h2><p>前面已经说过什么是事件冒泡，那么现在由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上,由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理(<strong>delegation</strong>)</p><p>以无序列表为例</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ul <span class="token operator">=</span> document <span class="token punctuation">.</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//父级</span>ul<span class="token punctuation">.</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取li标签具体内容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> event<span class="token punctuation">.</span> target<span class="token punctuation">.</span> innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//some code</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="12、定时器"><a href="#12、定时器" class="headerlink" title="12、定时器"></a>12、定时器</h2><p>JavaScript 提供定时执行代码的功能，叫做定时器(timer), 主要 由<code>setTimeout()</code>和<code>setinterva()</code> 这两个函数来完成。.它们向任务队列添加定时任务</p><h3 id="12-1、setTimeout"><a href="#12-1、setTimeout" class="headerlink" title="12.1、setTimeout"></a>12.1、setTimeout</h3><p>setTimeout 函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数,表示定时器的编号，以后可以用来取消这个定时器。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>func<span class="token operator">|</span>code， delay<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>setTimeout 函数接受两个参数,第一个参数 funclode 是将要推迟执行的函数名或者一段代码, 第二个参数 delay 是推迟执行的毫秒数</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token string">"定时器"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>，<span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>定时器可以进行取消</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意： 在定时器里的 this 关键字指向全局环境</p><h3 id="12-2、setInterval"><a href="#12-2、setInterval" class="headerlink" title="12.2、setInterval"></a>12.2、setInterval</h3><p>setInterval 函数的用法与 setTimeout 完全-致， 区别仅仅在于 setnterval 指定某个任务每隔一段时间就执行一次, 也就是无限次的定时执行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token number">.1</span><span class="token function">og</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>，<span class="token number">1000</span><span class="token punctuation">)</span></code></pre><h1 id="九、jQurey"><a href="#九、jQurey" class="headerlink" title="九、jQurey"></a>九、jQurey</h1><h2 id="1、jQurey-引入"><a href="#1、jQurey-引入" class="headerlink" title="1、jQurey 引入"></a>1、jQurey 引入</h2><p>在 jQurey 的<a href="https://jquery.com/">官网</a>下载，会弹出<a href="https://jquery.com/download/">链接</a>，右击链接另存为就可以，然后复制到你的项目里就完成了本地导入</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4267d0c49967468089c15de8d6709803~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>你的项目下面就会出现一个 jquery 的 js 文件</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca9ad623eca64c93bb3afaf240dc35fe~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h2><p><strong>$(选择器).action()</strong></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">"test -jquery"</span><span class="token operator">></span>  点我<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择器就是css的选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-jquery"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"he1lo, jQuery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//原生js，选择器少，麻烦不好记</span><span class="token comment" spellcheck="true">//标签</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//id</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标签选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#id1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".class1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//class选择器</span></code></pre><h2 id="3、事件"><a href="#3、事件" class="headerlink" title="3、事件"></a>3、事件</h2><h3 id="3-1、鼠标事件"><a href="#3-1、鼠标事件" class="headerlink" title="3.1、鼠标事件"></a>3.1、鼠标事件</h3><ul><li>click: 鼠标单击时触发；</li><li>dblclick：鼠标双击时触发；</li><li>mouseenter：鼠标进入时触发；</li><li>mouseleave：鼠标移出时触发；</li><li>mousemove：鼠标在 DOM 内部移动时触发；</li><li>hover：鼠标进入和退出时触发两个函数，相当于 mouseenter 加上 mouseleave。</li></ul><h3 id="3-2、键盘事件"><a href="#3-2、键盘事件" class="headerlink" title="3.2、键盘事件"></a>3.2、键盘事件</h3><p>键盘事件仅作用在当前焦点的 DOM 上，通常是<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>。</p><ul><li>keydown：键盘按下时触发；</li><li>keyup：键盘松开时触发；</li><li>keypress：按一次键后触发。</li></ul><h3 id="3-3、其他事件"><a href="#3-3、其他事件" class="headerlink" title="3.3、其他事件"></a>3.3、其他事件</h3><ul><li>focus：当 DOM 获得焦点时触发；</li><li>blur：当 DOM 失去焦点时触发；</li><li>change：当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>或<code>&lt;textarea&gt;</code>的内容改变时触发；</li><li>submit：当<code>&lt;form&gt;</code>提交时触发；</li><li>ready：当页面被载入并且 DOM 树完成初始化后触发。</li></ul><h2 id="操作-DOM-元素"><a href="#操作-DOM-元素" class="headerlink" title="操作 DOM 元素"></a>操作 DOM 元素</h2><p>jQuery 对象的<code>text()</code>和<code>html()</code>方法分别获取节点的文本和原始 HTML 文本</p><pre><code>&lt;!-- HTML结构 --&gt;&lt;ul id=&quot;test-ul&quot;&gt;    &lt;li class=&quot;js&quot;&gt;JavaScript&lt;/li&gt;    &lt;li name=&quot;book&quot;&gt;Java &amp;amp; JavaScript&lt;/li&gt;&lt;/ul&gt;</code></pre><p>分别获取文本和 HTML：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-ul li[name=book]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Java &amp; JavaScript'</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-ul li[name=book]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Java &amp;amp; JavaScript'</span></code></pre><p>节点文本操作</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">" #test-u11i [name=python]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">" #test-u1 1i [name=python]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"设置值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">" #test-u1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">htm1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">" #test-u1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">htm7</span><span class="token punctuation">(</span><span class="token string">"&lt;strong>123&lt;/strong>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置值</span></code></pre><p>CSS 的操作</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">' #test-u1 1i [name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>元素的显示和隐藏:本质<code>display :none</code></p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">" #test-u11i [name=python] "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">" #test-u1 1i [name=python]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>如果有误，欢迎指错纠正</strong></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰–JavaScript 教程</a></p><p><a href="https://jquery.cuishifeng.cn/">jQuery 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用ssh链接github</title>
      <link href="/breezeblog.gitee.io/posts/197b.html"/>
      <url>/breezeblog.gitee.io/posts/197b.html</url>
      
        <content type="html"><![CDATA[<h1 id="创建一个-SSH-key详细过程"><a href="#创建一个-SSH-key详细过程" class="headerlink" title="创建一个 SSH key详细过程"></a><a href="https://www.cnblogs.com/yinminbo/p/11810302.html">创建一个 SSH key详细过程</a></h1><p>转自：<a href="https://www.cnblogs.com/ayseeing/p/3572582.html">https://www.cnblogs.com/ayseeing/p/3572582.html</a></p><p>1、github管理项目的时候，可以直接使用https url克隆到本地，当然也可以使用 SSH url 克隆到本地。</p><p>2、复制https url 然后到 git Bash 里面直接用clone命令就可以将repository克隆到本地，而使用 SSH url 克隆却需要在克隆之前先配置和添加好 SSH key 。</p><p>3、如果用户想要使用 SSH url 克隆，就必须是这个项目的拥有者。否则用户是无法添加 SSH key 的。</p><p> </p><p>生成多个公钥请点击：<a href="http://www.cnblogs.com/ayseeing/p/4445194.html">http://www.cnblogs.com/ayseeing/p/4445194.html</a></p><h2 id="https-和-SSH-的区别："><a href="#https-和-SSH-的区别：" class="headerlink" title="https 和 SSH 的区别："></a>https 和 SSH 的区别：</h2><p>1、前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p><p>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p><p> </p><h2 id="在-github-上添加-SSH-key-的步骤："><a href="#在-github-上添加-SSH-key-的步骤：" class="headerlink" title="在 github 上添加 SSH key 的步骤："></a>在 github 上添加 SSH key 的步骤：</h2><h4 id="1、首先需要检查你电脑是否已经有-SSH-key"><a href="#1、首先需要检查你电脑是否已经有-SSH-key" class="headerlink" title="1、首先需要检查你电脑是否已经有 SSH key"></a>1、首先需要检查你电脑是否已经有 SSH key</h4><p>运行 git Bash 客户端，输入如下代码：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">ls</span></code></pre><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。</p><p> </p><h4 id="2、创建一个-SSH-key"><a href="#2、创建一个-SSH-key" class="headerlink" title="2、创建一个 SSH key"></a>2、创建一个 SSH key</h4><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"your_email@example.com"</span></code></pre><p>代码参数含义：</p><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p><pre class=" language-bash"><code class="language-bash">Generating public/private rsa key pair.<span class="token comment" spellcheck="true"># Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span></code></pre><p>当然，你也可以不输入文件名，使用默认文件名（<strong>推荐</strong>），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p><p> </p><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），</p><p>当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：</p><pre class=" language-bash"><code class="language-bash">Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: <span class="token comment" spellcheck="true"># Enter same passphrase again:</span></code></pre><p>接下来，就会显示如下代码提示，如：</p><pre class=" language-bash"><code class="language-bash">Your identification has been saved <span class="token keyword">in</span> /c/Users/you/.ssh/id_rsa.<span class="token comment" spellcheck="true"># Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><span class="token comment" spellcheck="true"># The key fingerprint is:</span><span class="token comment" spellcheck="true"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span></code></pre><p>当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p><p> </p><h4 id="3、添加你的-SSH-key-到-github上面去"><a href="#3、添加你的-SSH-key-到-github上面去" class="headerlink" title="3、添加你的 SSH key 到 github上面去"></a>3、添加你的 SSH key 到 github上面去</h4><p><strong>a、</strong> 首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p><pre class=" language-bash"><code class="language-bash">$ clip <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub</code></pre><p><strong>b、</strong> 登录你的github账号，从又上角的设置（ <a href="https://github.com/settings">Account Settings</a> ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。</p><p><strong>c、</strong> 点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。</p><p> </p><h3 id="4、测试一下该SSH-key"><a href="#4、测试一下该SSH-key" class="headerlink" title="4、测试一下该SSH key"></a>4、测试一下该SSH key</h3><p>在git Bash 中输入以下代码</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.com</code></pre><p>当你输入以上代码时，会有一段警告代码，如：</p><pre class=" language-bash"><code class="language-bash">The authenticity of host <span class="token string">'github.com (207.97.227.239)'</span> can't be established.<span class="token comment" spellcheck="true"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><span class="token comment" spellcheck="true"># Are you sure you want to continue connecting (yes/no)?</span></code></pre><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p><pre class=" language-bash"><code class="language-bash">Enter passphrase <span class="token keyword">for</span> key <span class="token string">'/c/Users/Administrator/.ssh/id_rsa'</span><span class="token keyword">:</span></code></pre><p>当然如果你密码输错了，会再要求你输入，知道对了为止。</p><p>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</p><p>密码正确后你会看到下面这段话，如：</p><pre class=" language-bash"><code class="language-bash">Hi username<span class="token operator">!</span> You've successfully authenticated, but GitHub does not<span class="token comment" spellcheck="true"># provide shell access.</span></code></pre><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p><p> </p><p>产考文档：<a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见问题解决方案</title>
      <link href="/breezeblog.gitee.io/posts/a281.html"/>
      <url>/breezeblog.gitee.io/posts/a281.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、出现登录错误，如图"><a href="#1、出现登录错误，如图" class="headerlink" title="1、出现登录错误，如图"></a>1、出现登录错误，如图</h3><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff3c089416c243bfac59682f7229eee5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%"><ul><li><p><strong>可能原因：</strong> 用户名和密码有问题，这是我在同步gitee和github的时候出现的情况，还有一种情况就是仅仅在提交Gitee或GitHub的时候报此错</p></li><li><p><strong>解决办法：</strong><br>1、先查看自己的git情况</p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看用户名 ：</span><span class="token function">git</span> config user.name<span class="token comment" spellcheck="true">#查看密码： </span><span class="token function">git</span> config user.password<span class="token comment" spellcheck="true">#查看邮箱：</span><span class="token function">git</span> config user.email<span class="token comment" spellcheck="true">#查看配置信息： </span><span class="token function">git</span> config --list  </code></pre><p>2、若信息有误,那就修改</p><pre class=" language-bash"><code class="language-bash">修改用户名<span class="token function">git</span> config --global user.name <span class="token string">"xxxx(新的用户名)"</span>修改密码<span class="token function">git</span> config --global user.password <span class="token string">"xxxx(新的密码)"</span>修改邮箱<span class="token function">git</span> config --global user.email <span class="token string">"xxxx@xxx.com(新的邮箱)"</span></code></pre><p>3、若确认信息无误，仍然存在此情况</p><p>3.1、<strong>在在同步gitee和github时：</strong> 删除<strong>后绑定</strong>的公钥并重新添加，比如把github的ssh给到gitee同步，就把gitee绑定的ssh删了重新添加一次即可</p><p>3.2、<strong>在单独提交时：</strong> 删除电脑中的**.ss**文件重新新建一个。关于如何新建ssh可以参考<a href="http://breezeblog.github.io/2022/08/01/ru-he-shi-yong-ssh-lian-jie-github/">《如何使用ssh链接github》</a> 或者直接搜</p><h3 id="2、出现add后部分文件无法添加的情况"><a href="#2、出现add后部分文件无法添加的情况" class="headerlink" title="2、出现add后部分文件无法添加的情况"></a>2、出现add后部分文件无法添加的情况</h3><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46e31b6016ba48a6ab545a6cd802a150~tplv-k3u1fbpfcp-watermark.image" alt="image.png" width="100%"><ul><li><p><strong>可能问题：</strong> 文件中存在 .git文件 </p></li><li><p><strong>解决办法：</strong></p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在add失败的文件中用git bush查看是否含有 .git文件</span>ll -a</code></pre><p>如果有把 .git文件删除，因为.git文件是隐藏的，可以使用cmd来删除，具体命令如下</p><pre class=" language-cmd"><code class="language-cmd"># 先进入你add失败的文件夹中cd [路径]# 删除del .git</code></pre><p><strong>注意：</strong> 删除后无法恢复，可以先复制一份防止出错</p><p>然后你会发现依然无法提交，因为.git文件被删除，所以可以在删除了.git文件目录的上一级新建一个随意名字的文件夹，把该文件放进去，最后正常的<code>git add</code> ，<code>git commit -m&quot;提交信息&quot;</code>，<code>git push</code>就可以啦  </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题优化指南</title>
      <link href="/breezeblog.gitee.io/posts/b8dd.html"/>
      <url>/breezeblog.gitee.io/posts/b8dd.html</url>
      
        <content type="html"><![CDATA[<h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p>选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><img src="https://pic.yupoo.com/kalbim/8fe1efcf/48cd56aa.png" width="100%"><img src="https://pic.yupoo.com/kalbim/0032ef7d/f77bff9d.png" width="100%"><p><strong>注意:</strong></p><p>如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。<br>date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。<br>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。<br>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>以下为文章的 Front-matter 示例。</p><p>最简示例</p><pre class=" language-yml"><code class="language-yml">title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00</code></pre><p>最全示例</p><pre class=" language-yml"><code class="language-yml">title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 张三img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a62928f3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown</code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><a href="https://kaiboshi.gitee.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/">详细 hexo 优化指南参考 1、</a><br><a href="https://liuruibin.com/posts/64eb/">详细 hexo 优化指南参考 1、</a><br><a href="http://luckyzmj.cn/posts/1d6f1579.html">详细 hexo 优化指南参考 3、</a><br><a href="https://yafine-blog.cn/posts/4ab2.html">详细 hexo 优化指南参考 4、</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用hexo指令与常见问题</title>
      <link href="/breezeblog.gitee.io/posts/de62.html"/>
      <url>/breezeblog.gitee.io/posts/de62.html</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装</span><span class="token function">npm</span> <span class="token function">install</span> hexo -g <span class="token comment" spellcheck="true">#升级</span><span class="token function">npm</span> update hexo -g<span class="token comment" spellcheck="true">#初始化</span>hexo init <span class="token comment" spellcheck="true"># 查看hexo当前版本</span>hexo -v<span class="token comment" spellcheck="true">#查看npm当前版本</span><span class="token function">npm</span> -v</code></pre><h3 id="文章发布流程"><a href="#文章发布流程" class="headerlink" title="文章发布流程"></a>文章发布流程</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#新建文章，可直接在新建好的.md文件中直接编辑</span>hexo n <span class="token string">"我的博客"</span> <span class="token operator">==</span> hexo new <span class="token string">"我的博客"</span> <span class="token comment" spellcheck="true">#生成</span>hexo g <span class="token operator">==</span> hexo generate <span class="token comment" spellcheck="true">#启动服务预览，Hexo 会监视文件变动并自动更新，您无须重启服务器。</span>hexo s <span class="token operator">==</span> hexo server <span class="token comment" spellcheck="true">#部署</span>hexo d <span class="token operator">==</span> hexo deploy </code></pre><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#暂时修改启动端口</span>hexo server -p 5000 <span class="token comment" spellcheck="true">#http代理</span><span class="token function">git</span> config --global http.proxy <span class="token string">'socks5://127.0.0.1:1080'</span><span class="token comment" spellcheck="true">#https代理</span><span class="token function">git</span> config --global https.proxy <span class="token string">'socks5://127.0.0.1:1080'</span><span class="token comment" spellcheck="true">#取消http代理</span><span class="token function">git</span> config --global --unset http.proxy<span class="token comment" spellcheck="true">#取消https代理</span><span class="token function">git</span> config --global --unset https.proxy<span class="token comment" spellcheck="true">#清除缓存 网页正常情况下可以忽略此条命令</span>hexo clean </code></pre><h2 id="hexo常见问题"><a href="#hexo常见问题" class="headerlink" title="hexo常见问题"></a>hexo常见问题</h2><h3 id="1、本地预览和线上不一致"><a href="#1、本地预览和线上不一致" class="headerlink" title="1、本地预览和线上不一致"></a>1、本地预览和线上不一致</h3><ul><li><strong>可能原因：</strong>  一般可能是<strong>浏览器缓存</strong>，提交需要到线上需要一些时间；还有个原因可能是提交<strong>分支的问题</strong>；还有就是有关<strong>gitee的问题</strong></li><li><strong>解决办法：</strong></li></ul><p>先Ctrl+F5强制刷新，如果不成功那么就可能是其他问题</p><p>对于提交<strong>分支问题</strong>，先去GitHub上查看你默认分支的名字，在博客仓库的设置里<br>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/246afd99555042f68a39a2c0a4bcf542~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%"></p><p>再去hexo站点的_config.yml文件中<code>deploy</code>的相关里使用 <strong>英文逗号</strong> 加 <strong>分支名字</strong>，修改分支为默认分支，如下图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18c55230099448d7b3ca090d2c992fc7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>对于<strong>gitee问题</strong>，如果你在gitee上启用了<code>gitee pages</code>服务&#96;，那么你需要在gitee pages页面点击更新，重新部署</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bae204940fe4704bedd627e9d6db479~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="2、出现如下报错："><a href="#2、出现如下报错：" class="headerlink" title="2、出现如下报错："></a>2、出现如下报错：</h3><pre class=" language-bash"><code class="language-bash">ssh: connect to host github.com port 22: Connection timed out<span class="token comment" spellcheck="true">#或者</span>ssh: connect to host 192.168.1.118 port 22: Connection refused</code></pre><ul><li><strong>可能原因：</strong> 22端口超时或拒接</li><li><strong>解决办法：</strong> (1)、先使用指令1，应该会出现相同报错，</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 指令1</span><span class="token function">ssh</span> -T git@github.com</code></pre><p>(2)、使用指令2，未出现报错</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 指令2</span><span class="token function">ssh</span> -T -p 443 git@ssh.github.com<span class="token comment" spellcheck="true"># 未报错</span>Hi xxxx<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.</code></pre><p>(3)、修改端口 ，在**.ssh**文件里新建一个无后缀的config文件，在里面输入如下代码来修改端口到443</p><pre class=" language-bash"><code class="language-bash">Host github.com  Hostname ssh.github.com  Port 443</code></pre><p>如果没有 <strong>.ssh</strong> 文件，关于如何链接.ssh和github可以参考<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub文档</a></p><h3 id="3、出现如图情况"><a href="#3、出现如图情况" class="headerlink" title="3、出现如图情况"></a>3、出现如图情况</h3><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff3c089416c243bfac59682f7229eee5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%"><ul><li>可能原因；用户名和密码有问题</li><li>解决办法：参考我另一篇文章《git的常见问题解决放案》</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是我亲身使用和遇见过的问题（还有很多未来得及记录），在后面会持续更新，有问题或者文章有错误欢迎通过QQ或者电子邮件联系我（后续可能会更新留言功能）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用git指令</title>
      <link href="/breezeblog.gitee.io/posts/8344.html"/>
      <url>/breezeblog.gitee.io/posts/8344.html</url>
      
        <content type="html"><![CDATA[<h2 id="git指令随手记"><a href="#git指令随手记" class="headerlink" title="git指令随手记"></a>git指令随手记</h2><p>我每天使用 Git ，但是很多命令记不住。</p><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e22f0ebf846244939822ce9dd607d78a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="1、新建代码库"><a href="#1、新建代码库" class="headerlink" title="1、新建代码库"></a>1、新建代码库</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在当前目录新建一个Git代码库</span>$ <span class="token function">git</span> init<span class="token comment" spellcheck="true"># 新建一个目录，将其初始化为Git代码库</span>$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 下载一个项目和它的整个代码历史</span>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示当前的Git配置</span>$ <span class="token function">git</span> config --list<span class="token comment" spellcheck="true"># 编辑Git配置文件</span>$ <span class="token function">git</span> config -e <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 设置提交代码时的用户信息</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span></code></pre><h3 id="3、增加-x2F-删除文件"><a href="#3、增加-x2F-删除文件" class="headerlink" title="3、增加&#x2F;删除文件"></a>3、增加&#x2F;删除文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加指定文件到暂存区</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 添加指定目录到暂存区，包括子目录</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 添加当前目录的所有文件到暂存区</span>$ <span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 添加每个变化前，都会要求确认</span><span class="token comment" spellcheck="true"># 对于同一个文件的多处变化，可以实现分次提交</span>$ <span class="token function">git</span> add -p<span class="token comment" spellcheck="true"># 删除工作区文件，并且将这次删除放入暂存区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 停止追踪指定文件，但该文件会保留在工作区</span>$ <span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 改名文件，并且将这个改名放入暂存区</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span></code></pre><h3 id="4、代码提交"><a href="#4、代码提交" class="headerlink" title="4、代码提交"></a>4、代码提交</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 提交暂存区到仓库区</span>$ <span class="token function">git</span> commit -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交暂存区的指定文件到仓库区</span>$ <span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交工作区自上次commit之后的变化，直接到仓库区</span>$ <span class="token function">git</span> commit -a<span class="token comment" spellcheck="true"># 提交时显示所有diff信息</span>$ <span class="token function">git</span> commit -v<span class="token comment" spellcheck="true"># 使用一次新的commit，替代上一次提交</span><span class="token comment" spellcheck="true"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ <span class="token function">git</span> commit --amend -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重做上一次commit，并包括指定文件的新变化</span>$ <span class="token function">git</span> commit --amend <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.</code></pre><h3 id="5、分支"><a href="#5、分支" class="headerlink" title="5、分支"></a>5、分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有本地分支</span>$ <span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 列出所有远程分支</span>$ <span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 列出所有本地分支和远程分支</span>$ <span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 新建一个分支，但依然停留在当前分支</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，并切换到该分支</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，指向指定commit</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，与指定的远程分支建立追踪关系</span>$ <span class="token function">git</span> branch --track <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换到指定分支，并更新工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换到上一个分支</span>$ <span class="token function">git</span> checkout -<span class="token comment" spellcheck="true"># 建立追踪关系，在现有分支与指定的远程分支之间</span>$ <span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 合并指定分支到当前分支</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 选择一个commit，合并进当前分支</span>$ <span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除分支</span>$ <span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程分支</span>$ <span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>$ <span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span></code></pre><h3 id="6、标签"><a href="#6、标签" class="headerlink" title="6、标签"></a>6、标签</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有tag</span>$ <span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 新建一个tag在当前commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个tag在指定commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除本地tag</span>$ <span class="token function">git</span> tag -d <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程tag</span>$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看tag信息</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交指定tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交所有tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --tags<span class="token comment" spellcheck="true"># 新建一个分支，指向某个tag</span></code></pre><h3 id="7、查看信息"><a href="#7、查看信息" class="headerlink" title="7、查看信息"></a>7、查看信息</h3><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># 显示有变更的文件</span> $ <span class="token function">git</span> status <span class="token comment" spellcheck="true"># 显示当前分支的版本历史</span> $ <span class="token function">git</span> log <span class="token comment" spellcheck="true"># 显示commit历史，以及每次commit发生变更的文件</span> $ <span class="token function">git</span> log --stat <span class="token comment" spellcheck="true"># 搜索提交历史，根据关键词</span> $ <span class="token function">git</span> log -S <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示某个commit之后的所有变动，每个commit占据一行</span> $ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --pretty<span class="token operator">=</span>format:%s <span class="token comment" spellcheck="true"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span> $ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --grep feature <span class="token comment" spellcheck="true"># 显示某个文件的版本历史，包括文件改名</span> $ <span class="token function">git</span> log --follow <span class="token punctuation">[</span>file<span class="token punctuation">]</span> $ <span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示指定文件相关的每一次diff</span> $ <span class="token function">git</span> log -p <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示过去5次提交</span> $ <span class="token function">git</span> log -5 --pretty --oneline <span class="token comment" spellcheck="true"># 显示所有提交过的用户，按提交次数排序</span> $ <span class="token function">git</span> shortlog -sn <span class="token comment" spellcheck="true"># 显示指定文件是什么人在什么时间修改过</span> $ <span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示暂存区和工作区的差异</span> $ <span class="token function">git</span> <span class="token function">diff</span> <span class="token comment" spellcheck="true"># 显示暂存区和上一个commit的差异</span> $ <span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示工作区与当前分支最新commit之间的差异</span> $ <span class="token function">git</span> <span class="token function">diff</span> HEAD <span class="token comment" spellcheck="true"># 显示两次提交之间的差异</span> $ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示今天你写了多少行代码</span> $ <span class="token function">git</span> <span class="token function">diff</span> --shortstat <span class="token string">"@&amp;#123;0 day ago&amp;#125;"</span> <span class="token comment" spellcheck="true"># 显示某次提交的元数据和内容变化</span> $ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示某次提交发生变化的文件</span> $ <span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示某次提交时，某个文件的内容</span> $ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 显示当前分支的最近几次提交</span> $ <span class="token function">git</span> reflog</code></pre><h3 id="8、远程同步"><a href="#8、远程同步" class="headerlink" title="8、远程同步"></a>8、远程同步</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载远程仓库的所有变动</span>$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示所有远程仓库</span>$ <span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 显示某个远程仓库的信息</span>$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 指定上传仓库位置</span>$ <span class="token function">git</span> remote add origin <span class="token punctuation">[</span>你远程仓库的url<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 增加一个新的远程仓库，并命名</span>$ <span class="token function">git</span> remote add <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 取回远程仓库的变化，并与本地分支合并</span>$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 上传本地指定分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 强行推送当前分支到远程仓库，即使有冲突</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --force<span class="token comment" spellcheck="true"># 推送所有分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --all</code></pre><h3 id="9、撤销"><a href="#9、撤销" class="headerlink" title="9、撤销"></a>9、撤销</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 恢复暂存区的指定文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 恢复某个commit的指定文件到暂存区和工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 恢复暂存区的所有文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置暂存区与工作区，与上一次commit保持一致</span>$ <span class="token function">git</span> reset --hard<span class="token comment" spellcheck="true"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ <span class="token function">git</span> reset --hard <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ <span class="token function">git</span> reset --keep <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个commit，用来撤销指定commit</span><span class="token comment" spellcheck="true"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 暂时将未提交的变化移除，稍后再移入</span>$ <span class="token function">git</span> stash$ <span class="token function">git</span> stash pop</code></pre><h3 id="10、其他"><a href="#10、其他" class="headerlink" title="10、其他"></a>10、其他</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成一个可供发布的压缩包</span>$ <span class="token function">git</span> archive</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文档借鉴自大佬：<a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">阮一峰</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客——致美好的明天</title>
      <link href="/breezeblog.gitee.io/posts/dd6a.html"/>
      <url>/breezeblog.gitee.io/posts/dd6a.html</url>
      
        <content type="html"><![CDATA[<p> <strong>2022&#x2F;8&#x2F;1</strong> 我的个人博客总算是勉强搭建完了，兜兜转转也花了几天时间，遇到不少问题，还好总算是解决了！<span class="emoji" alias="yum" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&amp;#x1f60b;</span></p><p>言归正传，就从现在先给自己写短时个规划吧<span class="emoji" alias="exclamation" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">&amp;#x2757;</span></p><p>趁着还没忘记，就在8月5号前更新<strong>markdown相关常用语法知识</strong>已及<strong>常用markdown语法表情</strong>，当然还有<strong>hexo的常见指令</strong>与<strong>git常见指令</strong>；在8月10号前学习完<strong>JavaScript</strong>并一起更新<strong>CSS</strong>,<strong>HTML</strong>；</p><p>9月26号就要考Java的计算机二级啦，好好备考<span class="emoji" alias="exclamation" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8">&amp;#x2757;</span>必须一次过</p><p>最令我头疼的英语不知何时才能好转<span class="emoji" alias="persevere" style fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8">&amp;#x1f623;</span>，攻克了Java基础就花点心思在英语上吧！</p><p>不要熬夜，会秃头，多吃饭，长高点，圣体要保护好</p><p>大二争取找个实习把，加油，一年内拿出点成绩出来</p><p>每个人都会有-段异常艰难的时光,没人在乎你怎样在深夜痛哭,别人再怎么感同身受，也只有<br>-瞬间。再苦再累再痛再难熬,只有也只能自己独自撑过。加油吧！进大厂！</p>]]></content>
      
      
      <categories>
          
          <category> daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
